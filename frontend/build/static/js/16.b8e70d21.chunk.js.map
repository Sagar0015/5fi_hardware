{"version":3,"sources":["pages/manageNetworkNodes/manageNetworkNodes.js","../node_modules/@material-ui/core/esm/DialogTitle/DialogTitle.js","../node_modules/@material-ui/core/esm/DialogContent/DialogContent.js","../node_modules/@material-ui/core/esm/DialogActions/DialogActions.js"],"names":["MonitorNetworkNodes","props","toggleSetUpAp","setState","setupApStatus","state","handleChangeFrequency","event","selectedFrequency","target","value","getAccessPoints","thisView","getAccessPointsToken","cancel","axios","CancelToken","source","all","apiService","token","then","res","accessPoints","catch","console","log","this","className","onClick","Object","keys","length","map","apKey","index","Availability","open","id","fontSize","container","spacing","item","xs","type","placeholder","onChange","displayEmpty","inputProps","color","Component","DialogTitle","React","ref","children","classes","_props$disableTypogra","disableTypography","other","_objectWithoutProperties","_extends","clsx","root","Typography","component","variant","withStyles","margin","padding","flex","name","DialogContent","_props$dividers","dividers","theme","WebkitOverflowScrolling","overflowY","paddingTop","borderTop","concat","palette","divider","borderBottom","DialogActions","_props$disableSpacing","disableSpacing","display","alignItems","justifyContent","marginLeft"],"mappings":"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","file":"static/js/16.b8e70d21.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './manageNetworkNodes.scss';\n\nimport {\n    Grid,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    FormControl,\n    Select,\n    MenuItem\n} from \"@material-ui/core\";\n\nimport * as Icons from \"@material-ui/icons\";\n\nimport apiService from '../../services/apiService';\n\nclass MonitorNetworkNodes extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            accessPoints: [],\n            setupApStatus: false,\n            selectedFrequency: ''\n        }\n\n        this.getAccessPointsToken = null;\n\n    }\n\n    componentDidMount(){\n        this.getAccessPoints();\n    }\n\n    toggleSetUpAp = () => {\n        this.setState({ setupApStatus: !this.state.setupApStatus });\n    }\n\n    handleChangeFrequency = (event) => {\n        this.setState({selectedFrequency: event.target.value})\n    }\n\n    getAccessPoints = () => {\n\n        var thisView = this;\n        if (this.getAccessPointsToken)\n            this.getAccessPointsToken.cancel();\n        this.getAccessPointsToken = axios.CancelToken.source();\n\n        axios.all([apiService.getAccessPoints(this.getAccessPointsToken.token)])\n            .then(function (res) {\n                if (res[0]) {\n                    if(res[0][\"status\"] && res[0][\"data\"]){\n                        thisView.setState({accessPoints: res[0][\"data\"]});\n                    }\n                }\n            }).catch(function (res) {\n                console.log(res);\n                console.log('An error occurred add subscriber element service');\n\n            });\n\n    }\n\n\n    render() {\n\n        const { accessPoints, setupApStatus, selectedFrequency } = this.state;\n\n        return (\n            <div className=\"five-g-manage-network-nodes\">\n                <div className=\"fgmn-setup-ap-btn\">\n                    <span onClick={this.toggleSetUpAp}>Setup AP</span>\n                </div>\n                <table className=\"mnt-table\">\n                    <thead>\n                        <tr>\n                            <th >Availability</th>\n                            <th >Cloud Connectivity</th>\n                            <th >Site Name</th>\n                            <th >Site Role</th>\n                            <th >Device Model</th>\n                            <th >Serial Number</th>\n                            <th >Bandwidth Tier</th>\n                            <th >Management IP</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            accessPoints && Object.keys(accessPoints).length > 0 &&\n                            Object.keys(accessPoints).map((apKey, index) => {\n                                return (\n                                    <tr key={index}>\n                                        <td><span className={accessPoints[apKey].Availability === \"Green\" ? \"available\" : \"\"}></span></td>\n                                        <td>{accessPoints[apKey][\"cloud connectivity\"]}</td>\n                                        <td>{accessPoints[apKey][\"Site name\"]}</td>\n                                        <td>{accessPoints[apKey][\"Site Role\"]}</td>\n                                        <td>{accessPoints[apKey][\"Device Model\"]}</td>\n                                        <td>{accessPoints[apKey][\"Serial number\"]}</td>\n                                        <td>{accessPoints[apKey][\"Bandwidth Tier\"]}</td>\n                                        <td>{accessPoints[apKey][\"Management IP\"]}</td>\n                                    </tr>\n                                )\n                            })\n                        }\n                    </tbody>\n                </table>\n\n                <Dialog open={setupApStatus} id=\"setup-ap-form\">\n                    <DialogTitle>\n                        Setup AP\n                        <Icons.Close fontSize={\"small\"} className=\"sap-close-icon\" onClick={this.toggleSetUpAp} />\n                    </DialogTitle>\n                    <DialogContent>\n                        <Grid className=\"sap-container\" container spacing={2}>\n                            <Grid item xs={12} className=\"fgd-form\">\n                                <div className=\"sap-each\">\n                                    <span>Gnb Make:</span>\n                                    <div className=\"sape-input\">\n                                        <input type=\"text\" placeholder=\"\"></input>\n                                    </div>\n                                </div>\n                                <div className=\"sap-each\">\n                                    <span>Gnb Serial Number:</span>\n                                    <div className=\"sape-input\">\n                                        <input type=\"text\" placeholder=\"\"></input>\n                                    </div>\n                                </div>\n                                <div className=\"sap-each\">\n                                    <span>NCI:</span>\n                                    <div className=\"sape-input\">\n                                        <input type=\"text\" placeholder=\"\"></input>\n                                    </div>\n                                </div>\n                                <div className=\"sap-each\">\n                                    <span>Enter IP address of AMF:</span>\n                                    <div className=\"sape-ip\">\n                                        <input type=\"text\" placeholder=\"255\"></input>\n                                        <span>.</span>\n                                        <input type=\"text\" placeholder=\"255\"></input>\n                                        <span>.</span>\n                                        <input type=\"text\" placeholder=\"255\"></input>\n                                        <span>.</span>\n                                        <input type=\"text\" placeholder=\"255\"></input>\n                                    </div>\n                                </div>\n                            </Grid>\n                            <Grid item xs={12} className=\"fgd-form\">\n                                <div className=\"sap-each select-freq-type\">\n                                    <span>Frequency of operation:</span>\n                                    <FormControl className={\"\"}>\n                                        <Select\n                                            value={selectedFrequency}\n                                            onChange={this.handleChangeFrequency}\n                                            displayEmpty\n                                            className={\"\"}\n                                            inputProps={{ 'aria-label': 'Without label' }}\n                                        >\n                                            <MenuItem value=\"\">Select Frequency</MenuItem>\n                                            <MenuItem value={\"cbrs\"}>CBRS spectrum 3.5 GHz</MenuItem>\n                                            <MenuItem value={\"licensed\"}>{\"Licensed spectrum 2.1 GHz / >26 GHz\"}</MenuItem>\n                                            <MenuItem value={\"us24\"}>Unlicensed spectrum 2.4 GHz</MenuItem>\n                                            <MenuItem value={\"us6\"}>Unlicensed spectrum 6 GHz</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.toggleSetUpAp} color=\"primary\">\n                            Submit\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n            </div>\n        )\n    }\n}\n\nexport default MonitorNetworkNodes;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    padding: '16px 24px',\n    flex: '0 0 auto'\n  }\n};\nvar DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), disableTypography ? children : /*#__PURE__*/React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h6\"\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a typography component.\n   * For instance, this can be useful to render an h4 instead of the default h2.\n   */\n  disableTypography: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogTitle'\n})(DialogTitle);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      flex: '1 1 auto',\n      WebkitOverflowScrolling: 'touch',\n      // Add iOS momentum scrolling.\n      overflowY: 'auto',\n      padding: '8px 24px',\n      '&:first-child': {\n        // dialog without title\n        paddingTop: 20\n      }\n    },\n\n    /* Styles applied to the root element if `dividers={true}`. */\n    dividers: {\n      padding: '16px 24px',\n      borderTop: \"1px solid \".concat(theme.palette.divider),\n      borderBottom: \"1px solid \".concat(theme.palette.divider)\n    }\n  };\n};\nvar DialogContent = /*#__PURE__*/React.forwardRef(function DialogContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$dividers = props.dividers,\n      dividers = _props$dividers === void 0 ? false : _props$dividers,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"dividers\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dividers && classes.dividers),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display the top and bottom dividers.\n   */\n  dividers: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContent'\n})(DialogContent);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8,\n    justifyContent: 'flex-end',\n    flex: '0 0 auto'\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogActions'\n})(DialogActions);"],"sourceRoot":""}