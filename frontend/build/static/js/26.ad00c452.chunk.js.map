{"version":3,"sources":["pages/monitorNetworkElement/monitorNetworkElement.js"],"names":["MyRadio","withStyles","root","color","checked","props","MonitorNetworkElement","getElementDetails","thisView","monitorHomeToken","cancel","axios","CancelToken","source","all","apiService","token","match","params","id","then","res","networkInfo","setState","networkElementInfo","processChartData","firstCallDone","catch","console","log","chart1","chart2","chart3","NF_stats","data","map","eachPoint","name","moment","Object","keys","format","value","dataTx","dataRx","Array","isArray","push","category","toggleHandOver","state","handoverStatus","ueList","handOverError","selectedHandoverElement","getUEList","togglePathSwitch","pathSwitchStatus","pathSwitch","pathSwitchError","selectedPathSwitchElement","getPathSwitch","handleHandoverChange","handlePathSwitchChange","ueListToken","callUnderProgress","length","submitHandOver","prepareHandoverToken","containerId","ueId","trim","prepareHandOver","pathSwitchToken","getPathSwitchList","pathSwitchData","eachSwitch","temp","eachField","submitPathSwitch","submitPathSwitchToken","lineData","uv","this","prevProps","prevState","className","container","spacing","item","lg","md","xs","title","name_of_nf","toUpperCase","upperTitle","bodyclassName","disableWidgetMenu","State","Health","DNN","hasOwnProperty","Management_IP","no_UEsserved","onClick","Path_sw_req_button","src","loadingIcon","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","angle","textAnchor","interval","type","stroke","fill","startIndex","endIndex","y","x","allowDuplicatedCategory","NF_packets","eachPacket","index","_source","layers","NF_Logs","eachLog","open","fontSize","eachUe","onChange","Component","connect","config","dispatch"],"mappings":"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","file":"static/js/26.ad00c452.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport './monitorNetworkElement.scss';\n\nimport {\n    Grid,\n    Button,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Radio,\n    withStyles\n} from \"@material-ui/core\";\n\nimport * as Icons from \"@material-ui/icons\";\n\nimport {\n    ResponsiveContainer,\n    LineChart,\n    Line,\n    YAxis,\n    XAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    Brush,\n    Area\n} from \"recharts\";\nimport moment from 'moment';\n\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nimport loadingIcon from '../../images/home/loading.gif';\n\nimport Widget from \"../../components/Widget\";\n\nimport apiService from '../../services/apiService.js';\n\n\nconst MyRadio = withStyles({\n    root: {\n        color: '#1F3BB3',\n        '&$checked': {\n            color: '#1F3BB3',\n        },\n    },\n    checked: {},\n})((props) => <Radio color=\"default\" {...props} />);\n\nclass MonitorNetworkElement extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            lineData: [\n                { name: 'July 1', uv: 4000 },\n                { name: 'July 2', uv: 3000 },\n                { name: 'July 3', uv: 2000 },\n                { name: 'July 4', uv: 1000 },\n                { name: 'July 5', uv: 1890 }\n            ],\n            chart1: {}, chart2: {}, chart3: {}\n            , networkElementInfo: {},\n            handoverStatus: false, pathSwitchStatus: false, handOverError: '', ueList: [],\n            selectedHandoverElement: null, selectedPathSwitchElement: null, pathSwitchError: '', pathSwitch: [],\n            callUnderProgress: false,\n            firstCallDone: false\n        }\n\n        this.ueListToken = null;\n        this.prepareHandoverToken = null;\n        this.pathSwitchToken = null;\n        this.submitPathSwitchToken = null;\n\n    }\n\n    componentDidMount() {\n\n        this.getElementDetails();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.match.params.id !== this.props.match.params.id) {\n            this.getElementDetails();\n        }\n    }\n\n    getElementDetails = () => {\n\n        var thisView = this;\n        if (this.monitorHomeToken)\n            this.monitorHomeToken.cancel();\n        this.monitorHomeToken = axios.CancelToken.source();\n\n        axios.all([apiService.getElementDetails(this.monitorHomeToken.token, this.props.match.params.id)])\n            .then(function (res) {\n                if (res[0]) {\n                    let networkInfo = res[0][\"data\"] ? res[0][\"data\"] : {};\n                    thisView.setState({ networkElementInfo: networkInfo });\n                    thisView.processChartData(networkInfo);\n                    thisView.setState({ firstCallDone: true });\n                }\n            }).catch(function (res) {\n                console.log(res);\n                console.log('An error occurred monitor element service');\n\n            });\n\n    }\n\n    processChartData = (networkInfo) => {\n\n        let chart1 = {}, chart2 = {}, chart3 = {};\n        if (networkInfo && networkInfo.NF_stats) {\n            if (networkInfo.NF_stats.chart1)\n                chart1 = networkInfo.NF_stats.chart1;\n            if (networkInfo.NF_stats.chart2)\n                chart2 = networkInfo.NF_stats.chart2;\n            if (networkInfo.NF_stats.chart3)\n                chart3 = networkInfo.NF_stats.chart3;\n        }\n\n        if (chart1.data) {\n            chart1.data = chart1.data.map((eachPoint) => {\n\n                return {\n                    name: moment(Object.keys(eachPoint)[0]).format('h:mm:ss'),\n                    value: eachPoint[Object.keys(eachPoint)[0]]\n                };\n            });\n            this.setState({ chart1 });\n        }\n\n        if (chart2.data) {\n            chart2.data = chart2.data.map((eachPoint) => {\n\n                return {\n                    name: moment(Object.keys(eachPoint)[0]).format('h:mm:ss'),\n                    value: eachPoint[Object.keys(eachPoint)[0]]\n                };\n            });\n            this.setState({ chart2 });\n        }\n\n        if (chart3.data) {\n            chart3.dataTx = [];\n            chart3.dataRx = [];\n            chart3.data.map((eachPoint) => {\n\n                if (Array.isArray(eachPoint[Object.keys(eachPoint)[0]])) {\n                    chart3.dataTx.push({\n                        category: moment(Object.keys(eachPoint)[0]).format('h:mm:ss'),\n                        value: eachPoint[Object.keys(eachPoint)[0]][0]\n                    });\n\n                    chart3.dataRx.push({\n                        category: moment(Object.keys(eachPoint)[0]).format('h:mm:ss'),\n                        value: eachPoint[Object.keys(eachPoint)[0]][1]\n                    });\n                } else {\n                    chart3.dataTx.push({\n                        name: moment(Object.keys(eachPoint)[0]).format('h:mm:ss'),\n                        value: eachPoint[Object.keys(eachPoint)[0]]\n                    });\n                    chart3.dataRx = null;\n                }\n\n\n            });\n            this.setState({ chart3 });\n            console.log(chart3);\n        }\n\n    }\n\n    toggleHandOver = () => {\n        if (!this.state.handoverStatus) {\n            this.setState({ ueList: [], handOverError: '', selectedHandoverElement: null });\n            this.getUEList();\n        }\n\n        this.setState({ handoverStatus: !this.state.handoverStatus });\n    }\n\n    togglePathSwitch = () => {\n        if (!this.state.pathSwitchStatus) {\n            this.setState({ pathSwitch: [], pathSwitchError: '', selectedPathSwitchElement: null });\n            this.getPathSwitch();\n        }\n\n        this.setState({ pathSwitchStatus: !this.state.pathSwitchStatus });\n    }\n\n    handleHandoverChange = (value) => {\n        this.setState({ selectedHandoverElement: value });\n    }\n\n    handlePathSwitchChange = (value) => {\n        this.setState({ selectedPathSwitchElement: value });\n    }\n\n    getUEList = () => {\n\n        var thisView = this;\n        if (this.ueListToken)\n            this.ueListToken.cancel();\n        this.ueListToken = axios.CancelToken.source();\n\n        this.setState({ callUnderProgress: true });\n        axios.all([apiService.getUEList(this.ueListToken.token, this.props.match.params.id)])\n            .then(function (res) {\n                if (res[0]) {\n\n\n                    let ueList = (res[0][\"data\"] && res[0][\"data\"][\"UElist\"]) ? res[0][\"data\"][\"UElist\"] : [];\n                    if (ueList && ueList.length > 0 && !ueList[0][\"- ue-id\"]) {\n                        ueList = [];\n                    }\n\n                    thisView.setState({ ueList: ueList });\n                    thisView.setState({ callUnderProgress: false });\n                }\n            }).catch(function (res) {\n                console.log(res);\n                console.log('An error occurred monitor element service');\n                thisView.setState({ callUnderProgress: false });\n            });\n\n    }\n\n    submitHandOver = () => {\n\n\n        if (!this.state.selectedHandoverElement) {\n            this.setState({ handOverError: 'Please Select UE' });\n            return;\n        } else {\n            this.setState({ handOverError: '' });\n        }\n\n        var thisView = this;\n        if (this.prepareHandoverToken)\n            this.prepareHandoverToken.cancel();\n        this.prepareHandoverToken = axios.CancelToken.source();\n\n        let data = {\n            containerId: this.props.match.params.id,\n            ueId: this.state.selectedHandoverElement.trim()\n        }\n\n        this.setState({ callUnderProgress: true });\n        axios.all([apiService.prepareHandOver(this.prepareHandoverToken.token, data)])\n            .then(function (res) {\n                if (res[0]) {\n                    thisView.setState({ callUnderProgress: false });\n                    thisView.toggleHandOver();\n                }\n            }).catch(function (res) {\n                console.log(res);\n                console.log('An error occurred monitor element service');\n                thisView.setState({ callUnderProgress: false });\n            });\n\n    }\n\n    getPathSwitch = () => {\n\n        var thisView = this;\n        if (this.pathSwitchToken)\n            this.pathSwitchToken.cancel();\n        this.pathSwitchToken = axios.CancelToken.source();\n\n        this.setState({ callUnderProgress: true });\n        axios.all([apiService.getPathSwitchList(this.pathSwitchToken.token)])\n            .then(function (res) {\n                if (res[0]) {\n\n                    let pathSwitchData = (res[0][\"data\"] && res[0][\"data\"]) ? res[0][\"data\"] : [];\n\n                    pathSwitchData = pathSwitchData.map((eachSwitch) => {\n                        let temp = {};\n                        eachSwitch.map((eachField) => {\n                            if (Object.keys(eachField)[0] === \"handover_key\") {\n                                temp[\"key\"] = eachField[\"handover_key\"];\n                            } else if (Object.keys(eachField)[0] === \"ueid\") {\n                                temp[\"ueid\"] = eachField[\"ueid\"];\n                            } else if (Object.keys(eachField)[0] === \"source_gnb\") {\n                                temp[\"source\"] = eachField[\"source_gnb\"];\n                            }\n                        })\n                        return temp;\n                    })\n\n\n                    thisView.setState({ pathSwitch: pathSwitchData });\n                    thisView.setState({ callUnderProgress: false });\n                }\n            }).catch(function (res) {\n                console.log(res);\n                console.log('An error occurred monitor element service');\n                thisView.setState({ callUnderProgress: false });\n            });\n\n    }\n\n    submitPathSwitch = () => {\n\n\n        if (!this.state.selectedPathSwitchElement) {\n            this.setState({ pathSwitchError: 'Please Select' });\n            return;\n        }\n\n        var thisView = this;\n        if (this.submitPathSwitchToken)\n            this.submitPathSwitchToken.cancel();\n        this.submitPathSwitchToken = axios.CancelToken.source();\n\n        let data = {\n            containerId: this.props.match.params.id,\n            id: this.state.selectedPathSwitchElement\n        }\n\n        this.setState({ callUnderProgress: true });\n        axios.all([apiService.submitPathSwitch(this.submitPathSwitchToken.token, data)])\n            .then(function (res) {\n                if (res[0]) {\n                    thisView.setState({ callUnderProgress: false });\n                    thisView.togglePathSwitch();\n                }\n            }).catch(function (res) {\n                console.log(res);\n                console.log('An error occurred monitor element service');\n                thisView.setState({ callUnderProgress: false });\n            });\n\n    }\n\n\n    render() {\n\n        const { lineData, networkElementInfo, handoverStatus, selectedHandoverElement,\n            pathSwitchStatus, selectedPathSwitchElement, callUnderProgress,\n            ueList, handOverError, pathSwitch, pathSwitchError,\n            chart1, chart2, chart3, firstCallDone } = this.state;\n\n        return (\n            <div className=\"five-g-monitor\">\n                <Grid container spacing={4}>\n                    <Grid item lg={4} md={6} xs={12} className=\"fgm-inner-grid individual-grid-five-g\">\n                        <Widget\n                            title={networkElementInfo.name_of_nf ? networkElementInfo.name_of_nf.toUpperCase() : \"-\"}\n                            upperTitle\n                            bodyclassName={''}\n                            className={'test'}\n                            disableWidgetMenu={true}\n                        >\n                            <div className=\"fgm-details-container\">\n                                <div className=\"fgmdc-stats\">\n                                    <div className=\"fgmds-each\">\n                                        <span>State</span>\n                                        <span>{networkElementInfo.State ? networkElementInfo.State : '-'}</span>\n                                    </div>\n                                    <div className=\"fgmds-each\">\n                                        <span>Health</span>\n                                        <span>{networkElementInfo.Health ? networkElementInfo.Health : '-'}</span>\n                                    </div>\n                                    <div className=\"fgmds-each\">\n                                        <span>DNN</span>\n                                        <span>{networkElementInfo.DNN ? networkElementInfo.DNN : '-'}</span>\n                                    </div>\n                                </div>\n                                <div className=\"fgmdc-sensor-active\">\n                                    <span>IP address:</span>\n                                    <span>{networkElementInfo.hasOwnProperty(\"Management_IP\") ? networkElementInfo.Management_IP : '-'}</span>\n                                </div>\n\n                                <div className=\"fgmdc-served\">\n                                    <span>Number of UEs served:</span>\n                                    <span>{networkElementInfo.hasOwnProperty(\"no_UEsserved\") ? networkElementInfo.no_UEsserved : '-'}</span>\n                                </div>\n                                <div className=\"fgmdc-handover-container\">\n                                    {\n                                        networkElementInfo[\"Handover-prepare_button\"] === \"True\" &&\n                                        <span onClick={this.toggleHandOver}>Handover Prepare</span>\n                                    }\n                                    {\n                                        networkElementInfo.Path_sw_req_button === \"True\" &&\n                                        <span onClick={this.togglePathSwitch}>Path Switch Request</span>\n                                    }\n                                </div>\n                            </div>\n                            {\n                                !firstCallDone &&\n                                <div className=\"each-widget-loading\">\n                                    <img src={loadingIcon} />\n                                </div>\n                            }\n                        </Widget>\n                    </Grid>\n                    <Grid item lg={8} md={6} xs={12} className=\"fgd-form individual-grid-five-g\">\n                        <Widget\n                            title=\"Statistics\"\n                            upperTitle\n                            bodyclassName={''}\n                            className={''}\n                            disableWidgetMenu={true}\n                        >\n                            <div className=\"fgm-stats-container\">\n                                <Grid container spacing={4}>\n                                    <Grid item md={4} xs={12} className=\"fgd-form\">\n                                        <div className=\"fgmsc-main\">\n                                            <span>{chart1 ? chart1.title : ''}</span>\n                                            <div className=\"fgscm-chart\">\n                                                <ResponsiveContainer width=\"100%\" height={250}>\n                                                    <LineChart\n                                                        width={500}\n                                                        height={250}\n                                                        data={(chart1 && chart1.data) ? chart1.data : []}\n                                                        margin={{\n                                                            top: 10,\n                                                            right: 30,\n                                                            left: 0,\n                                                            bottom: 40,\n                                                        }}\n                                                    >\n                                                        <CartesianGrid strokeDasharray=\"3 3\" />\n                                                        <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" interval={2} />\n                                                        <YAxis />\n                                                        <Tooltip />\n                                                        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                                                        <Brush\n                                                            stroke=\"#8784d8\"\n                                                            startIndex={0}\n                                                            endIndex={(chart1 && chart1.data) ? (chart1.data.length > 20 ? 19 : chart1.data.length - 1) : 0}\n                                                            height={20}\n                                                            fill='rgba(0, 0, 0, 0)'\n                                                            y={220}\n                                                        ><Area x={0} y={30} type=\"monotone\" dataKey=\"value\" stroke=\"#000\" fill=\"url(#splitColor)\" />\n                                                        </Brush>\n                                                    </LineChart>\n                                                </ResponsiveContainer>\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                    <Grid item md={4} xs={12} className=\"fgd-form\">\n                                        <div className=\"fgmsc-main\">\n                                            <span>{chart2 ? chart2.title : ''}</span>\n                                            <div className=\"fgscm-chart\">\n                                                <ResponsiveContainer width=\"100%\" height={250}>\n                                                    <LineChart\n                                                        width={500}\n                                                        height={250}\n                                                        data={(chart2 && chart2.data) ? chart2.data : []}\n                                                        margin={{\n                                                            top: 10,\n                                                            right: 30,\n                                                            left: 0,\n                                                            bottom: 40,\n                                                        }}\n                                                    >\n                                                        <CartesianGrid strokeDasharray=\"3 3\" />\n                                                        <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" interval={2} />\n                                                        <YAxis />\n                                                        <Tooltip />\n                                                        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                                                        <Brush\n                                                            stroke=\"#8784d8\"\n                                                            startIndex={0}\n                                                            endIndex={(chart1 && chart1.data) ? (chart1.data.length > 20 ? 19 : chart1.data.length - 1) : 0}\n                                                            height={20}\n                                                            fill='rgba(0, 0, 0, 0)'\n                                                            y={220}\n                                                        ><Area type=\"monotone\" dataKey=\"value\" stroke=\"#000\" fill=\"url(#splitColor)\" />\n                                                        </Brush>\n                                                    </LineChart>\n                                                </ResponsiveContainer>\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                    <Grid item md={4} xs={12} className=\"fgd-form\">\n                                        <div className=\"fgmsc-main\">\n                                            <span>{chart3 ? chart3.title : ''}</span>\n                                            <div className=\"fgscm-chart\">\n                                                <ResponsiveContainer width=\"100%\" height={250}>\n                                                    {\n                                                        (chart3 && chart3.dataRx) ?\n\n                                                            <LineChart\n                                                                width={500}\n                                                                height={250}\n                                                                margin={{\n                                                                    top: 10,\n                                                                    right: 30,\n                                                                    left: 0,\n                                                                    bottom: 40,\n                                                                }}\n                                                            >\n                                                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                                                <XAxis dataKey=\"category\" type=\"category\" allowDuplicatedCategory={false} angle={-45} textAnchor=\"end\" />\n                                                                <YAxis dataKey=\"value\" />\n                                                                <Tooltip />\n                                                                <Line dataKey=\"value\" data={(chart3 && chart3.dataTx) ? chart3.dataTx : []} name={\"TX\"} stroke=\"#8884d8\" fill=\"#8884d8\" />\n                                                                <Line dataKey=\"value\" data={(chart3 && chart3.dataRx) ? chart3.dataRx : []} name={\"RX\"} stroke=\"#8884d8\" fill=\"#8884d8\" />\n                                                                <Brush\n                                                                    stroke=\"green\"\n                                                                    startIndex={0}\n                                                                    endIndex={20}\n                                                                    height={20}\n                                                                    fill='rgba(0, 0, 0, 0)'\n                                                                    y={220}\n                                                                ><Area data={(chart3 && chart3.dataTx) ? chart3.dataTx : []} stroke=\"#000\" fill=\"url(#splitColor)\" />\n                                                                </Brush>\n                                                            </LineChart> :\n                                                            <LineChart\n                                                                width={500}\n                                                                height={250}\n                                                                data={(chart3 && chart3.dataTx) ? chart3.dataTx : []}\n                                                                margin={{\n                                                                    top: 10,\n                                                                    right: 30,\n                                                                    left: 0,\n                                                                    bottom: 40,\n                                                                }}\n                                                            >\n                                                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                                                <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" interval={2} />\n                                                                <YAxis />\n                                                                <Tooltip />\n                                                                <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                                                                <Brush\n                                                                    stroke=\"#8784d8\"\n                                                                    startIndex={0}\n                                                                    endIndex={(chart3 && chart3.dataTx) ? (chart3.dataTx.length > 20 ? 19 : chart3.dataTx.length - 1) : 0}\n                                                                    height={20}\n                                                                    fill='rgba(0, 0, 0, 0)'\n                                                                    y={220}\n                                                                ><Area x={0} y={30} type=\"monotone\" dataKey=\"value\" stroke=\"#000\" fill=\"url(#splitColor)\" />\n                                                                </Brush>\n                                                            </LineChart>\n                                                    }\n\n                                                </ResponsiveContainer>\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                            {\n                                !firstCallDone &&\n                                <div className=\"each-widget-loading\">\n                                    <img src={loadingIcon} />\n                                </div>\n                            }\n                        </Widget>\n                    </Grid>\n                    <Grid item xs={12} className=\"fgd-form individual-grid-five-g\">\n                        <Widget\n                            title=\"\"\n                            upperTitle\n                            bodyclassName={''}\n                            className={''}\n                            disableWidgetMenu={true}\n                        >\n                            <Tabs className=\"ne-tabs\">\n                                <TabList>\n                                    <Tab>Packets</Tab>\n                                    <Tab>Logs</Tab>\n                                    <Tab>Console</Tab>\n                                </TabList>\n\n                                <TabPanel>\n                                    <div className=\"fdg-packets-container\">\n                                        <div className=\"fdgpc-head\">\n                                            <div className=\"fdgpce-row\">Number</div>\n                                            <div className=\"fdgpce-row\">Time</div>\n                                            <div className=\"fdgpce-row\">Source</div>\n                                            <div className=\"fdgpce-row\">Destination</div>\n                                            <div className=\"fdgpce-row\">Protocol</div>\n                                            <div className=\"fdgpce-row\">Details</div>\n                                        </div>\n                                        {\n                                            networkElementInfo && networkElementInfo.NF_packets && networkElementInfo.NF_packets.length > 0 &&\n                                            networkElementInfo.NF_packets.map((eachPacket, index) => {\n                                                return (\n                                                    <div key={index} className=\"fdgpc-each\">\n                                                        <div className=\"fdgpce-row\">{index + 1}</div>\n                                                        <div className=\"fdgpce-row\">\n                                                            {\n                                                                eachPacket._source && eachPacket._source.layers && eachPacket._source.layers[\"frame.time\"] && eachPacket._source.layers[\"frame.time\"][0] &&\n                                                                moment(eachPacket._source.layers[\"frame.time\"][0]).format('MM-DD-YYYY hh:mm:ss')\n                                                            }\n                                                        </div>\n                                                        <div className=\"fdgpce-row\">\n                                                            {\n                                                                eachPacket._source && eachPacket._source.layers && eachPacket._source.layers[\"ip.src\"] &&\n                                                                eachPacket._source.layers[\"ip.src\"][0]\n                                                            }\n                                                        </div>\n                                                        <div className=\"fdgpce-row\">\n                                                            {\n                                                                eachPacket._source && eachPacket._source.layers && eachPacket._source.layers[\"ip.src\"] &&\n                                                                eachPacket._source.layers[\"ip.dst\"][0]\n                                                            }\n                                                        </div>\n                                                        <div className=\"fdgpce-row\">\n                                                            {\n                                                                eachPacket._source && eachPacket._source.layers && eachPacket._source.layers[\"_ws.col.Protocol\"] &&\n                                                                eachPacket._source.layers[\"_ws.col.Protocol\"][0]\n                                                            }\n                                                        </div>\n                                                        <div className=\"fdgpce-row\">\n                                                            {\n                                                                eachPacket._source && eachPacket._source.layers && eachPacket._source.layers[\"_ws.col.Info\"] &&\n                                                                eachPacket._source.layers[\"_ws.col.Info\"][0]\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                )\n                                            })\n                                        }\n\n                                    </div>\n                                </TabPanel>\n                                <TabPanel>\n                                    <div className=\"fdg-logs-container\">\n                                        {\n                                            networkElementInfo && networkElementInfo.NF_Logs && networkElementInfo.NF_Logs.length > 0 &&\n                                            networkElementInfo.NF_Logs.map((eachLog, index) => {\n                                                return (\n                                                    <span key={index}>{eachLog}</span>\n                                                )\n                                            })\n                                        }\n                                    </div>\n                                </TabPanel>\n                                <TabPanel>\n                                    <h2> Terminal </h2>\n                                </TabPanel>\n                            </Tabs>\n                            {\n                                !firstCallDone &&\n                                <div className=\"each-widget-loading\">\n                                    <img src={loadingIcon} />\n                                </div>\n                            }\n                        </Widget>\n                    </Grid>\n                </Grid>\n\n                <Dialog open={handoverStatus} id=\"handover-prepare\">\n                    <DialogTitle>\n                        Handover Prepare\n                        <Icons.Close fontSize={\"small\"} className=\"hp-close-icon\" onClick={this.toggleHandOver} />\n                    </DialogTitle>\n                    <DialogContent>\n                        <Grid className=\"hp-container\" container spacing={2}>\n                            {\n                                handOverError && handOverError !== '' &&\n                                <span className=\"hpc-error\">{handOverError}</span>\n                            }\n                            <Grid item xs={12} className=\"fgd-form\">\n                                <div className=\"hpc-content\">\n                                    {\n                                        ueList && ueList.length > 0 &&\n                                        <div className=\"hpc-table-each\">\n                                            <div className=\"hpct-row\"></div>\n                                            <div className=\"hpct-row\">UEID</div>\n                                            <div className=\"hpct-row\">Status</div>\n                                        </div>\n                                    }\n\n                                    {\n                                        !callUnderProgress &&\n                                        <>\n                                            {\n                                                ueList && ueList.length > 0 ?\n                                                    ueList.map((eachUe, index) => {\n                                                        return (\n                                                            <div key={index} className=\"hpc-table-each\" onClick={() => { this.handleHandoverChange(eachUe[\"- ue-id\"]) }}>\n                                                                <div className=\"hpct-row\">\n                                                                    <MyRadio\n                                                                        checked={selectedHandoverElement === eachUe[\"- ue-id\"]}\n                                                                        onChange={() => { this.handleHandoverChange(eachUe[\"- ue-id\"]) }}\n                                                                        value={eachUe[\"- ue-id\"]}\n                                                                        name=\"radio-button-demo\"\n                                                                    />\n                                                                </div>\n                                                                <div className=\"hpct-row\">{eachUe[\"- ue-id\"]}</div>\n                                                                <div className=\"hpct-row\">Connected</div>\n                                                            </div>\n                                                        )\n                                                    }) : <span className=\"no_ue\">No UE to handover</span>\n                                            }\n                                        </>\n                                    }\n\n\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        {\n                            callUnderProgress ?\n                                <img src={loadingIcon} className=\"call_under_progress_icon\" /> : (\n                                    <>\n                                        {\n                                            ueList && ueList.length > 0 &&\n                                            <Button onClick={this.submitHandOver} color=\"primary\">\n                                                Submit\n                                            </Button>\n                                        }\n                                    </>\n                                )\n                        }\n                    </DialogActions>\n                </Dialog>\n\n                <Dialog open={pathSwitchStatus} id=\"path-switch\">\n                    <DialogTitle>\n                        Path Switch Request\n                        <Icons.Close fontSize={\"small\"} className=\"hp-close-icon\" onClick={this.togglePathSwitch} />\n                    </DialogTitle>\n                    <DialogContent>\n                        <Grid className=\"hp-container\" container spacing={2}>\n                            {\n                                pathSwitchError && pathSwitchError !== '' &&\n                                <span className=\"hpc-error\">{pathSwitchError}</span>\n                            }\n                            <Grid item xs={12} className=\"fgd-form\">\n                                <div className=\"hpc-content\">\n                                    {\n                                        pathSwitch && pathSwitch.length > 0 &&\n                                        <div className=\"hpc-table-each\">\n                                            <div className=\"hpct-row\"></div>\n                                            <div className=\"hpct-row\">UEID</div>\n                                            <div className=\"hpct-row\">Source gNB ID</div>\n                                        </div>\n                                    }\n                                    {\n                                        !callUnderProgress &&\n                                        <>\n                                            {\n                                                pathSwitch && pathSwitch.length > 0 ?\n                                                    pathSwitch.map((eachUe, index) => {\n                                                        return (\n                                                            <div key={index} className=\"hpc-table-each\" onClick={() => { this.handlePathSwitchChange(eachUe[\"key\"]) }}>\n                                                                <div className=\"hpct-row\">\n                                                                    <MyRadio\n                                                                        checked={selectedPathSwitchElement === eachUe[\"key\"]}\n                                                                        onChange={() => { this.handlePathSwitchChange(eachUe[\"key\"]) }}\n                                                                        value={eachUe[\"key\"]}\n                                                                        name=\"radio-button-demo\"\n                                                                    />\n                                                                </div>\n                                                                <div className=\"hpct-row\">{eachUe[\"ueid\"]}</div>\n                                                                <div className=\"hpct-row\">{eachUe[\"source\"]}</div>\n                                                            </div>\n                                                        )\n                                                    }) : <span className=\"no_ue\">No UE to switch</span>\n                                            }\n                                        </>\n                                    }\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        {\n                            callUnderProgress ?\n                                <img src={loadingIcon} className=\"call_under_progress_icon\" /> :\n                                <>\n                                    {\n                                        pathSwitch && pathSwitch.length > 0 &&\n                                        <Button onClick={this.submitPathSwitch} color=\"primary\">\n                                            Submit\n                                        </Button>\n                                    }\n                                </>\n\n                        }\n                    </DialogActions>\n                </Dialog>\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    config: state.config\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MonitorNetworkElement);"],"sourceRoot":""}