{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _desc, _value, _class;\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _autobindDecorator = require('autobind-decorator');\nvar _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);\nvar _valueTransformer = require('./value-transformer');\nvar valueTransformer = _interopRequireWildcard(_valueTransformer);\nvar _defaultClassNames = require('./default-class-names');\nvar _defaultClassNames2 = _interopRequireDefault(_defaultClassNames);\nvar _label = require('./label');\nvar _label2 = _interopRequireDefault(_label);\nvar _rangePropType = require('./range-prop-type');\nvar _rangePropType2 = _interopRequireDefault(_rangePropType);\nvar _valuePropType = require('./value-prop-type');\nvar _valuePropType2 = _interopRequireDefault(_valuePropType);\nvar _slider = require('./slider');\nvar _slider2 = _interopRequireDefault(_slider);\nvar _track = require('./track');\nvar _track2 = _interopRequireDefault(_track);\nvar _utils = require('../utils');\nvar _keyCodes = require('./key-codes');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n  return desc;\n}\n\n/**\n * A React component that allows users to input numeric values within a range\n * by dragging its sliders.\n */\nvar InputRange = (_class = function (_React$Component) {\n  _inherits(InputRange, _React$Component);\n  _createClass(InputRange, null, [{\n    key: 'propTypes',\n    /**\n     * @ignore\n     * @override\n     * @return {Object}\n     */\n    get: function get() {\n      return {\n        allowSameValues: _propTypes2.default.bool,\n        ariaLabelledby: _propTypes2.default.string,\n        ariaControls: _propTypes2.default.string,\n        classNames: _propTypes2.default.objectOf(_propTypes2.default.string),\n        disabled: _propTypes2.default.bool,\n        draggableTrack: _propTypes2.default.bool,\n        formatLabel: _propTypes2.default.func,\n        maxValue: _rangePropType2.default,\n        minValue: _rangePropType2.default,\n        name: _propTypes2.default.string,\n        onChangeStart: _propTypes2.default.func,\n        onChange: _propTypes2.default.func.isRequired,\n        onChangeComplete: _propTypes2.default.func,\n        step: _propTypes2.default.number,\n        value: _valuePropType2.default\n      };\n    }\n\n    /**\n     * @ignore\n     * @override\n     * @return {Object}\n     */\n  }, {\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        allowSameValues: false,\n        classNames: _defaultClassNames2.default,\n        disabled: false,\n        maxValue: 10,\n        minValue: 0,\n        step: 1\n      };\n    }\n\n    /**\n     * @param {Object} props\n     * @param {boolean} [props.allowSameValues]\n     * @param {string} [props.ariaLabelledby]\n     * @param {string} [props.ariaControls]\n     * @param {InputRangeClassNames} [props.classNames]\n     * @param {boolean} [props.disabled = false]\n     * @param {Function} [props.formatLabel]\n     * @param {number|Range} [props.maxValue = 10]\n     * @param {number|Range} [props.minValue = 0]\n     * @param {string} [props.name]\n     * @param {string} props.onChange\n     * @param {Function} [props.onChangeComplete]\n     * @param {Function} [props.onChangeStart]\n     * @param {number} [props.step = 1]\n     * @param {number|Range} props.value\n     */\n  }]);\n\n  function InputRange(props) {\n    _classCallCheck(this, InputRange);\n\n    /**\n     * @private\n     * @type {?number}\n     */\n    var _this = _possibleConstructorReturn(this, (InputRange.__proto__ || Object.getPrototypeOf(InputRange)).call(this, props));\n    _this.startValue = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    _this.node = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    _this.trackNode = null;\n\n    /**\n     * @private\n     * @type {bool}\n     */\n    _this.isSliderDragging = false;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.lastKeyMoved = null;\n    return _this;\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n\n  _createClass(InputRange, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.removeDocumentMouseUpListener();\n      this.removeDocumentTouchEndListener();\n    }\n\n    /**\n     * Return the CSS class name of the component\n     * @private\n     * @return {string}\n     */\n  }, {\n    key: 'getComponentClassName',\n    value: function getComponentClassName() {\n      if (!this.props.disabled) {\n        return this.props.classNames.inputRange;\n      }\n      return this.props.classNames.disabledInputRange;\n    }\n\n    /**\n     * Return the bounding rect of the track\n     * @private\n     * @return {ClientRect}\n     */\n  }, {\n    key: 'getTrackClientRect',\n    value: function getTrackClientRect() {\n      return this.trackNode.getClientRect();\n    }\n\n    /**\n     * Return the slider key closest to a point\n     * @private\n     * @param {Point} position\n     * @return {string}\n     */\n  }, {\n    key: 'getKeyByPosition',\n    value: function getKeyByPosition(position) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n      if (this.isMultiValue()) {\n        var distanceToMin = (0, _utils.distanceTo)(position, positions.min);\n        var distanceToMax = (0, _utils.distanceTo)(position, positions.max);\n        if (distanceToMin < distanceToMax) {\n          return 'min';\n        }\n      }\n      return 'max';\n    }\n\n    /**\n     * Return all the slider keys\n     * @private\n     * @return {string[]}\n     */\n  }, {\n    key: 'getKeys',\n    value: function getKeys() {\n      if (this.isMultiValue()) {\n        return ['min', 'max'];\n      }\n      return ['max'];\n    }\n\n    /**\n     * Return true if the difference between the new and the current value is\n     * greater or equal to the step amount of the component\n     * @private\n     * @param {Range} values\n     * @return {boolean}\n     */\n  }, {\n    key: 'hasStepDifference',\n    value: function hasStepDifference(values) {\n      var currentValues = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      return (0, _utils.length)(values.min, currentValues.min) >= this.props.step || (0, _utils.length)(values.max, currentValues.max) >= this.props.step;\n    }\n\n    /**\n     * Return true if the component accepts a min and max value\n     * @private\n     * @return {boolean}\n     */\n  }, {\n    key: 'isMultiValue',\n    value: function isMultiValue() {\n      return (0, _utils.isObject)(this.props.value);\n    }\n\n    /**\n     * Return true if the range is within the max and min value of the component\n     * @private\n     * @param {Range} values\n     * @return {boolean}\n     */\n  }, {\n    key: 'isWithinRange',\n    value: function isWithinRange(values) {\n      if (this.isMultiValue()) {\n        return values.min >= this.props.minValue && values.max <= this.props.maxValue && this.props.allowSameValues ? values.min <= values.max : values.min < values.max;\n      }\n      return values.max >= this.props.minValue && values.max <= this.props.maxValue;\n    }\n\n    /**\n     * Return true if the new value should trigger a render\n     * @private\n     * @param {Range} values\n     * @return {boolean}\n     */\n  }, {\n    key: 'shouldUpdate',\n    value: function shouldUpdate(values) {\n      return this.isWithinRange(values) && this.hasStepDifference(values);\n    }\n\n    /**\n     * Update the position of a slider\n     * @private\n     * @param {string} key\n     * @param {Point} position\n     * @return {void}\n     */\n  }, {\n    key: 'updatePosition',\n    value: function updatePosition(key, position) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n      positions[key] = position;\n      this.lastKeyMoved = key;\n      this.updatePositions(positions);\n    }\n\n    /**\n     * Update the positions of multiple sliders\n     * @private\n     * @param {Object} positions\n     * @param {Point} positions.min\n     * @param {Point} positions.max\n     * @return {void}\n     */\n  }, {\n    key: 'updatePositions',\n    value: function updatePositions(positions) {\n      var values = {\n        min: valueTransformer.getValueFromPosition(positions.min, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n        max: valueTransformer.getValueFromPosition(positions.max, this.props.minValue, this.props.maxValue, this.getTrackClientRect())\n      };\n      var transformedValues = {\n        min: valueTransformer.getStepValueFromValue(values.min, this.props.step),\n        max: valueTransformer.getStepValueFromValue(values.max, this.props.step)\n      };\n      this.updateValues(transformedValues);\n    }\n\n    /**\n     * Update the value of a slider\n     * @private\n     * @param {string} key\n     * @param {number} value\n     * @return {void}\n     */\n  }, {\n    key: 'updateValue',\n    value: function updateValue(key, value) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      values[key] = value;\n      this.updateValues(values);\n    }\n\n    /**\n     * Update the values of multiple sliders\n     * @private\n     * @param {Range|number} values\n     * @return {void}\n     */\n  }, {\n    key: 'updateValues',\n    value: function updateValues(values) {\n      if (!this.shouldUpdate(values)) {\n        return;\n      }\n      this.props.onChange(this.isMultiValue() ? values : values.max);\n    }\n\n    /**\n     * Increment the value of a slider by key name\n     * @private\n     * @param {string} key\n     * @return {void}\n     */\n  }, {\n    key: 'incrementValue',\n    value: function incrementValue(key) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var value = values[key] + this.props.step;\n      this.updateValue(key, value);\n    }\n\n    /**\n     * Decrement the value of a slider by key name\n     * @private\n     * @param {string} key\n     * @return {void}\n     */\n  }, {\n    key: 'decrementValue',\n    value: function decrementValue(key) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var value = values[key] - this.props.step;\n      this.updateValue(key, value);\n    }\n\n    /**\n     * Listen to mouseup event\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: 'addDocumentMouseUpListener',\n    value: function addDocumentMouseUpListener() {\n      this.removeDocumentMouseUpListener();\n      this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n    }\n\n    /**\n     * Listen to touchend event\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: 'addDocumentTouchEndListener',\n    value: function addDocumentTouchEndListener() {\n      this.removeDocumentTouchEndListener();\n      this.node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n    }\n\n    /**\n     * Stop listening to mouseup event\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: 'removeDocumentMouseUpListener',\n    value: function removeDocumentMouseUpListener() {\n      this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n    }\n\n    /**\n     * Stop listening to touchend event\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: 'removeDocumentTouchEndListener',\n    value: function removeDocumentTouchEndListener() {\n      this.node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n    }\n\n    /**\n     * Handle any \"mousemove\" event received by the slider\n     * @private\n     * @param {SyntheticEvent} event\n     * @param {string} key\n     * @return {void}\n     */\n  }, {\n    key: 'handleSliderDrag',\n    value: function handleSliderDrag(event, key) {\n      var _this2 = this;\n      if (this.props.disabled) {\n        return;\n      }\n      var position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n      this.isSliderDragging = true;\n      requestAnimationFrame(function () {\n        return _this2.updatePosition(key, position);\n      });\n    }\n\n    /**\n     * Handle any \"mousemove\" event received by the track\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n  }, {\n    key: 'handleTrackDrag',\n    value: function handleTrackDrag(event, prevEvent) {\n      if (this.props.disabled || !this.props.draggableTrack || this.isSliderDragging) {\n        return;\n      }\n      var _props = this.props,\n        maxValue = _props.maxValue,\n        minValue = _props.minValue,\n        _props$value = _props.value,\n        max = _props$value.max,\n        min = _props$value.min;\n      var position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n      var value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n      var stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n      var prevPosition = valueTransformer.getPositionFromEvent(prevEvent, this.getTrackClientRect());\n      var prevValue = valueTransformer.getValueFromPosition(prevPosition, minValue, maxValue, this.getTrackClientRect());\n      var prevStepValue = valueTransformer.getStepValueFromValue(prevValue, this.props.step);\n      var offset = prevStepValue - stepValue;\n      var transformedValues = {\n        min: min - offset,\n        max: max - offset\n      };\n      this.updateValues(transformedValues);\n    }\n\n    /**\n     * Handle any \"keydown\" event received by the slider\n     * @private\n     * @param {SyntheticEvent} event\n     * @param {string} key\n     * @return {void}\n     */\n  }, {\n    key: 'handleSliderKeyDown',\n    value: function handleSliderKeyDown(event, key) {\n      if (this.props.disabled) {\n        return;\n      }\n      switch (event.keyCode) {\n        case _keyCodes.LEFT_ARROW:\n        case _keyCodes.DOWN_ARROW:\n          event.preventDefault();\n          this.decrementValue(key);\n          break;\n        case _keyCodes.RIGHT_ARROW:\n        case _keyCodes.UP_ARROW:\n          event.preventDefault();\n          this.incrementValue(key);\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n     * Handle any \"mousedown\" event received by the track\n     * @private\n     * @param {SyntheticEvent} event\n     * @param {Point} position\n     * @return {void}\n     */\n  }, {\n    key: 'handleTrackMouseDown',\n    value: function handleTrackMouseDown(event, position) {\n      if (this.props.disabled) {\n        return;\n      }\n      var _props2 = this.props,\n        maxValue = _props2.maxValue,\n        minValue = _props2.minValue,\n        _props2$value = _props2.value,\n        max = _props2$value.max,\n        min = _props2$value.min;\n      event.preventDefault();\n      var value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n      var stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n      if (!this.props.draggableTrack || stepValue > max || stepValue < min) {\n        this.updatePosition(this.getKeyByPosition(position), position);\n      }\n    }\n\n    /**\n     * Handle the start of any mouse/touch event\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: 'handleInteractionStart',\n    value: function handleInteractionStart() {\n      if (this.props.onChangeStart) {\n        this.props.onChangeStart(this.props.value);\n      }\n      if (this.props.onChangeComplete && !(0, _utils.isDefined)(this.startValue)) {\n        this.startValue = this.props.value;\n      }\n    }\n\n    /**\n     * Handle the end of any mouse/touch event\n     * @private\n     * @return {void}\n     */\n  }, {\n    key: 'handleInteractionEnd',\n    value: function handleInteractionEnd() {\n      if (this.isSliderDragging) {\n        this.isSliderDragging = false;\n      }\n      if (!this.props.onChangeComplete || !(0, _utils.isDefined)(this.startValue)) {\n        return;\n      }\n      if (this.startValue !== this.props.value) {\n        this.props.onChangeComplete(this.props.value);\n      }\n      this.startValue = null;\n    }\n\n    /**\n     * Handle any \"keydown\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n  }, {\n    key: 'handleKeyDown',\n    value: function handleKeyDown(event) {\n      this.handleInteractionStart(event);\n    }\n\n    /**\n     * Handle any \"keyup\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n  }, {\n    key: 'handleKeyUp',\n    value: function handleKeyUp(event) {\n      this.handleInteractionEnd(event);\n    }\n\n    /**\n     * Handle any \"mousedown\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n  }, {\n    key: 'handleMouseDown',\n    value: function handleMouseDown(event) {\n      this.handleInteractionStart(event);\n      this.addDocumentMouseUpListener();\n    }\n\n    /**\n     * Handle any \"mouseup\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     */\n  }, {\n    key: 'handleMouseUp',\n    value: function handleMouseUp(event) {\n      this.handleInteractionEnd(event);\n      this.removeDocumentMouseUpListener();\n    }\n\n    /**\n     * Handle any \"touchstart\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n  }, {\n    key: 'handleTouchStart',\n    value: function handleTouchStart(event) {\n      this.handleInteractionStart(event);\n      this.addDocumentTouchEndListener();\n    }\n\n    /**\n     * Handle any \"touchend\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     */\n  }, {\n    key: 'handleTouchEnd',\n    value: function handleTouchEnd(event) {\n      this.handleInteractionEnd(event);\n      this.removeDocumentTouchEndListener();\n    }\n\n    /**\n     * Return JSX of sliders\n     * @private\n     * @return {JSX.Element}\n     */\n  }, {\n    key: 'renderSliders',\n    value: function renderSliders() {\n      var _this3 = this;\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n      var keys = this.props.allowSameValues && this.lastKeyMoved === 'min' ? this.getKeys().reverse() : this.getKeys();\n      return keys.map(function (key) {\n        var value = values[key];\n        var percentage = percentages[key];\n        var _props3 = _this3.props,\n          maxValue = _props3.maxValue,\n          minValue = _props3.minValue;\n        if (key === 'min') {\n          maxValue = values.max;\n        } else {\n          minValue = values.min;\n        }\n        var slider = _react2.default.createElement(_slider2.default, {\n          ariaLabelledby: _this3.props.ariaLabelledby,\n          ariaControls: _this3.props.ariaControls,\n          classNames: _this3.props.classNames,\n          formatLabel: _this3.props.formatLabel,\n          key: key,\n          maxValue: maxValue,\n          minValue: minValue,\n          onSliderDrag: _this3.handleSliderDrag,\n          onSliderKeyDown: _this3.handleSliderKeyDown,\n          percentage: percentage,\n          type: key,\n          value: value\n        });\n        return slider;\n      });\n    }\n\n    /**\n     * Return JSX of hidden inputs\n     * @private\n     * @return {JSX.Element}\n     */\n  }, {\n    key: 'renderHiddenInputs',\n    value: function renderHiddenInputs() {\n      var _this4 = this;\n      if (!this.props.name) {\n        return [];\n      }\n      var isMultiValue = this.isMultiValue();\n      var values = valueTransformer.getValueFromProps(this.props, isMultiValue);\n      return this.getKeys().map(function (key) {\n        var value = values[key];\n        var name = isMultiValue ? '' + _this4.props.name + (0, _utils.captialize)(key) : _this4.props.name;\n        return _react2.default.createElement('input', {\n          key: key,\n          type: 'hidden',\n          name: name,\n          value: value\n        });\n      });\n    }\n\n    /**\n     * @ignore\n     * @override\n     * @return {JSX.Element}\n     */\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n      var componentClassName = this.getComponentClassName();\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n      return _react2.default.createElement('div', {\n        'aria-disabled': this.props.disabled,\n        ref: function ref(node) {\n          _this5.node = node;\n        },\n        className: componentClassName,\n        onKeyDown: this.handleKeyDown,\n        onKeyUp: this.handleKeyUp,\n        onMouseDown: this.handleMouseDown,\n        onTouchStart: this.handleTouchStart\n      }, _react2.default.createElement(_label2.default, {\n        classNames: this.props.classNames,\n        formatLabel: this.props.formatLabel,\n        type: 'min'\n      }, this.props.minValue), _react2.default.createElement(_track2.default, {\n        classNames: this.props.classNames,\n        draggableTrack: this.props.draggableTrack,\n        ref: function ref(trackNode) {\n          _this5.trackNode = trackNode;\n        },\n        percentages: percentages,\n        onTrackDrag: this.handleTrackDrag,\n        onTrackMouseDown: this.handleTrackMouseDown\n      }, this.renderSliders()), _react2.default.createElement(_label2.default, {\n        classNames: this.props.classNames,\n        formatLabel: this.props.formatLabel,\n        type: 'max'\n      }, this.props.maxValue), this.renderHiddenInputs());\n    }\n  }]);\n  return InputRange;\n}(_react2.default.Component), (_applyDecoratedDescriptor(_class.prototype, 'handleSliderDrag', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleSliderDrag'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleTrackDrag', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleTrackDrag'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleSliderKeyDown', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleSliderKeyDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleTrackMouseDown', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleTrackMouseDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleInteractionStart', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleInteractionStart'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleInteractionEnd', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleInteractionEnd'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleKeyDown', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleKeyDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleKeyUp', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleKeyUp'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleMouseDown', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleMouseDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleMouseUp', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleMouseUp'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleTouchStart', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleTouchStart'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleTouchEnd', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleTouchEnd'), _class.prototype)), _class);\nexports.default = InputRange;\nmodule.exports = exports['default'];","map":{"version":3,"mappings":"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","names":["valueTransformer","InputRange","allowSameValues","_propTypes2","bool","ariaLabelledby","string","ariaControls","classNames","objectOf","disabled","draggableTrack","formatLabel","func","maxValue","minValue","name","onChangeStart","onChange","isRequired","onChangeComplete","step","number","value","props","_classCallCheck","_this","startValue","node","trackNode","isSliderDragging","lastKeyMoved","removeDocumentMouseUpListener","removeDocumentTouchEndListener","inputRange","disabledInputRange","getClientRect","position","values","getValueFromProps","isMultiValue","positions","getPositionsFromValues","getTrackClientRect","distanceToMin","min","distanceToMax","max","currentValues","isWithinRange","hasStepDifference","key","updatePositions","getValueFromPosition","transformedValues","getStepValueFromValue","updateValues","shouldUpdate","updateValue","ownerDocument","addEventListener","handleMouseUp","handleTouchEnd","removeEventListener","event","getPositionFromEvent","requestAnimationFrame","_this2","updatePosition","prevEvent","_props$value","stepValue","prevPosition","prevValue","prevStepValue","offset","keyCode","preventDefault","decrementValue","incrementValue","_props2$value","getKeyByPosition","handleInteractionStart","handleInteractionEnd","addDocumentMouseUpListener","addDocumentTouchEndListener","percentages","getPercentagesFromValues","keys","getKeys","reverse","map","percentage","_this3","slider","_react2","onSliderDrag","handleSliderDrag","onSliderKeyDown","handleSliderKeyDown","type","_this4","componentClassName","getComponentClassName","ref","_this5","className","onKeyDown","handleKeyDown","onKeyUp","handleKeyUp","onMouseDown","handleMouseDown","onTouchStart","handleTouchStart","onTrackDrag","handleTrackDrag","onTrackMouseDown","handleTrackMouseDown","renderSliders","renderHiddenInputs","Component"],"sources":["../../../src/js/input-range/input-range.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from 'autobind-decorator';\nimport * as valueTransformer from './value-transformer';\nimport DEFAULT_CLASS_NAMES from './default-class-names';\nimport Label from './label';\nimport rangePropType from './range-prop-type';\nimport valuePropType from './value-prop-type';\nimport Slider from './slider';\nimport Track from './track';\nimport { captialize, distanceTo, isDefined, isObject, length } from '../utils';\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from './key-codes';\n\n/**\n * A React component that allows users to input numeric values within a range\n * by dragging its sliders.\n */\nexport default class InputRange extends React.Component {\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get propTypes() {\n    return {\n      allowSameValues: PropTypes.bool,\n      ariaLabelledby: PropTypes.string,\n      ariaControls: PropTypes.string,\n      classNames: PropTypes.objectOf(PropTypes.string),\n      disabled: PropTypes.bool,\n      draggableTrack: PropTypes.bool,\n      formatLabel: PropTypes.func,\n      maxValue: rangePropType,\n      minValue: rangePropType,\n      name: PropTypes.string,\n      onChangeStart: PropTypes.func,\n      onChange: PropTypes.func.isRequired,\n      onChangeComplete: PropTypes.func,\n      step: PropTypes.number,\n      value: valuePropType,\n    };\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get defaultProps() {\n    return {\n      allowSameValues: false,\n      classNames: DEFAULT_CLASS_NAMES,\n      disabled: false,\n      maxValue: 10,\n      minValue: 0,\n      step: 1,\n    };\n  }\n\n  /**\n   * @param {Object} props\n   * @param {boolean} [props.allowSameValues]\n   * @param {string} [props.ariaLabelledby]\n   * @param {string} [props.ariaControls]\n   * @param {InputRangeClassNames} [props.classNames]\n   * @param {boolean} [props.disabled = false]\n   * @param {Function} [props.formatLabel]\n   * @param {number|Range} [props.maxValue = 10]\n   * @param {number|Range} [props.minValue = 0]\n   * @param {string} [props.name]\n   * @param {string} props.onChange\n   * @param {Function} [props.onChangeComplete]\n   * @param {Function} [props.onChangeStart]\n   * @param {number} [props.step = 1]\n   * @param {number|Range} props.value\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @private\n     * @type {?number}\n     */\n    this.startValue = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.node = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.trackNode = null;\n\n    /**\n     * @private\n     * @type {bool}\n     */\n    this.isSliderDragging = false;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.lastKeyMoved = null;\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n  componentWillUnmount() {\n    this.removeDocumentMouseUpListener();\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return the CSS class name of the component\n   * @private\n   * @return {string}\n   */\n  getComponentClassName() {\n    if (!this.props.disabled) {\n      return this.props.classNames.inputRange;\n    }\n\n    return this.props.classNames.disabledInputRange;\n  }\n\n  /**\n   * Return the bounding rect of the track\n   * @private\n   * @return {ClientRect}\n   */\n  getTrackClientRect() {\n    return this.trackNode.getClientRect();\n  }\n\n  /**\n   * Return the slider key closest to a point\n   * @private\n   * @param {Point} position\n   * @return {string}\n   */\n  getKeyByPosition(position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    if (this.isMultiValue()) {\n      const distanceToMin = distanceTo(position, positions.min);\n      const distanceToMax = distanceTo(position, positions.max);\n\n      if (distanceToMin < distanceToMax) {\n        return 'min';\n      }\n    }\n\n    return 'max';\n  }\n\n  /**\n   * Return all the slider keys\n   * @private\n   * @return {string[]}\n   */\n  getKeys() {\n    if (this.isMultiValue()) {\n      return ['min', 'max'];\n    }\n\n    return ['max'];\n  }\n\n  /**\n   * Return true if the difference between the new and the current value is\n   * greater or equal to the step amount of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  hasStepDifference(values) {\n    const currentValues = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    return length(values.min, currentValues.min) >= this.props.step ||\n           length(values.max, currentValues.max) >= this.props.step;\n  }\n\n  /**\n   * Return true if the component accepts a min and max value\n   * @private\n   * @return {boolean}\n   */\n  isMultiValue() {\n    return isObject(this.props.value);\n  }\n\n  /**\n   * Return true if the range is within the max and min value of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  isWithinRange(values) {\n    if (this.isMultiValue()) {\n      return values.min >= this.props.minValue &&\n             values.max <= this.props.maxValue &&\n             this.props.allowSameValues\n              ? values.min <= values.max\n              : values.min < values.max;\n    }\n\n    return values.max >= this.props.minValue && values.max <= this.props.maxValue;\n  }\n\n  /**\n   * Return true if the new value should trigger a render\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  shouldUpdate(values) {\n    return this.isWithinRange(values) && this.hasStepDifference(values);\n  }\n\n  /**\n   * Update the position of a slider\n   * @private\n   * @param {string} key\n   * @param {Point} position\n   * @return {void}\n   */\n  updatePosition(key, position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    positions[key] = position;\n    this.lastKeyMoved = key;\n\n    this.updatePositions(positions);\n  }\n\n  /**\n   * Update the positions of multiple sliders\n   * @private\n   * @param {Object} positions\n   * @param {Point} positions.min\n   * @param {Point} positions.max\n   * @return {void}\n   */\n  updatePositions(positions) {\n    const values = {\n      min: valueTransformer.getValueFromPosition(positions.min, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n      max: valueTransformer.getValueFromPosition(positions.max, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n    };\n\n    const transformedValues = {\n      min: valueTransformer.getStepValueFromValue(values.min, this.props.step),\n      max: valueTransformer.getStepValueFromValue(values.max, this.props.step),\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Update the value of a slider\n   * @private\n   * @param {string} key\n   * @param {number} value\n   * @return {void}\n   */\n  updateValue(key, value) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    values[key] = value;\n\n    this.updateValues(values);\n  }\n\n  /**\n   * Update the values of multiple sliders\n   * @private\n   * @param {Range|number} values\n   * @return {void}\n   */\n  updateValues(values) {\n    if (!this.shouldUpdate(values)) {\n      return;\n    }\n\n    this.props.onChange(this.isMultiValue() ? values : values.max);\n  }\n\n  /**\n   * Increment the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  incrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] + this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Decrement the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  decrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] - this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Listen to mouseup event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseUpListener() {\n    this.removeDocumentMouseUpListener();\n    this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Listen to touchend event\n   * @private\n   * @return {void}\n   */\n  addDocumentTouchEndListener() {\n    this.removeDocumentTouchEndListener();\n    this.node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Stop listening to mouseup event\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseUpListener() {\n    this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Stop listening to touchend event\n   * @private\n   * @return {void}\n   */\n  removeDocumentTouchEndListener() {\n    this.node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderDrag(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    this.isSliderDragging = true;\n    requestAnimationFrame(() => this.updatePosition(key, position));\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTrackDrag(event, prevEvent) {\n    if (this.props.disabled || !this.props.draggableTrack || this.isSliderDragging) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    const prevPosition = valueTransformer.getPositionFromEvent(prevEvent, this.getTrackClientRect());\n    const prevValue = valueTransformer.getValueFromPosition(prevPosition, minValue, maxValue, this.getTrackClientRect());\n    const prevStepValue = valueTransformer.getStepValueFromValue(prevValue, this.props.step);\n\n    const offset = prevStepValue - stepValue;\n\n    const transformedValues = {\n      min: min - offset,\n      max: max - offset,\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderKeyDown(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n    case LEFT_ARROW:\n    case DOWN_ARROW:\n      event.preventDefault();\n      this.decrementValue(key);\n      break;\n\n    case RIGHT_ARROW:\n    case UP_ARROW:\n      event.preventDefault();\n      this.incrementValue(key);\n      break;\n\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {Point} position\n   * @return {void}\n   */\n  @autobind\n  handleTrackMouseDown(event, position) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    event.preventDefault();\n\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    if (!this.props.draggableTrack || stepValue > max || stepValue < min) {\n      this.updatePosition(this.getKeyByPosition(position), position);\n    }\n  }\n\n  /**\n   * Handle the start of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionStart() {\n    if (this.props.onChangeStart) {\n      this.props.onChangeStart(this.props.value);\n    }\n\n    if (this.props.onChangeComplete && !isDefined(this.startValue)) {\n      this.startValue = this.props.value;\n    }\n  }\n\n  /**\n   * Handle the end of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionEnd() {\n    if (this.isSliderDragging) {\n      this.isSliderDragging = false;\n    }\n\n    if (!this.props.onChangeComplete || !isDefined(this.startValue)) {\n      return;\n    }\n\n    if (this.startValue !== this.props.value) {\n      this.props.onChangeComplete(this.props.value);\n    }\n\n    this.startValue = null;\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyDown(event) {\n    this.handleInteractionStart(event);\n  }\n\n  /**\n   * Handle any \"keyup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyUp(event) {\n    this.handleInteractionEnd(event);\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleMouseDown(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"mouseup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleMouseUp(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"touchstart\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTouchStart(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentTouchEndListener();\n  }\n\n  /**\n   * Handle any \"touchend\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleTouchEnd(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return JSX of sliders\n   * @private\n   * @return {JSX.Element}\n   */\n  renderSliders() {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n    const keys = this.props.allowSameValues &&\n      this.lastKeyMoved === 'min'\n      ? this.getKeys().reverse()\n      : this.getKeys();\n\n    return keys.map((key) => {\n      const value = values[key];\n      const percentage = percentages[key];\n\n      let { maxValue, minValue } = this.props;\n\n      if (key === 'min') {\n        maxValue = values.max;\n      } else {\n        minValue = values.min;\n      }\n\n      const slider = (\n        <Slider\n          ariaLabelledby={this.props.ariaLabelledby}\n          ariaControls={this.props.ariaControls}\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          key={key}\n          maxValue={maxValue}\n          minValue={minValue}\n          onSliderDrag={this.handleSliderDrag}\n          onSliderKeyDown={this.handleSliderKeyDown}\n          percentage={percentage}\n          type={key}\n          value={value} />\n      );\n\n      return slider;\n    });\n  }\n\n  /**\n   * Return JSX of hidden inputs\n   * @private\n   * @return {JSX.Element}\n   */\n  renderHiddenInputs() {\n    if (!this.props.name) {\n      return [];\n    }\n\n    const isMultiValue = this.isMultiValue();\n    const values = valueTransformer.getValueFromProps(this.props, isMultiValue);\n\n    return this.getKeys().map((key) => {\n      const value = values[key];\n      const name = isMultiValue ? `${this.props.name}${captialize(key)}` : this.props.name;\n\n      return (\n        <input key={key} type=\"hidden\" name={name} value={value} />\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {JSX.Element}\n   */\n  render() {\n    const componentClassName = this.getComponentClassName();\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n\n    return (\n      <div\n        aria-disabled={this.props.disabled}\n        ref={(node) => { this.node = node; }}\n        className={componentClassName}\n        onKeyDown={this.handleKeyDown}\n        onKeyUp={this.handleKeyUp}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}>\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"min\">\n          {this.props.minValue}\n        </Label>\n\n        <Track\n          classNames={this.props.classNames}\n          draggableTrack={this.props.draggableTrack}\n          ref={(trackNode) => { this.trackNode = trackNode; }}\n          percentages={percentages}\n          onTrackDrag={this.handleTrackDrag}\n          onTrackMouseDown={this.handleTrackMouseDown}>\n\n          {this.renderSliders()}\n        </Track>\n\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"max\">\n          {this.props.maxValue}\n        </Label>\n\n        {this.renderHiddenInputs()}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}