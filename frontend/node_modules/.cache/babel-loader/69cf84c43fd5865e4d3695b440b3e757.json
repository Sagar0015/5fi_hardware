{"ast":null,"code":"(function (a, b) {\n  if ('function' == typeof define && define.amd) define(['exports', 'react', 'react-object-inspector', 'platform'], b);else if ('undefined' != typeof exports) b(exports, require('react'), require('react-object-inspector'), require('platform'));else {\n    var c = {\n      exports: {}\n    };\n    b(c.exports, a.React, a.reactObjectInspector, a.platform), a.utils = c.exports;\n  }\n})(this, function (a, b, c, d) {\n  'use strict';\n\n  function e(a) {\n    return a && a.__esModule ? a : {\n      default: a\n    };\n  }\n  Object.defineProperty(a, '__esModule', {\n    value: !0\n  }), a.handleLogging = function (a, b) {\n    console[a] = function () {\n      for (var c = arguments.length, d = Array(c), e = 0; e < c; e++) d[e] = arguments[e];\n      try {\n        var h;\n        (h = console).oldLog.apply(h, ['[' + a + ']'].concat(d));\n      } catch (a) {\n        throw new Error('Terminal was loaded more than once check script tags');\n      }\n      var i = [].concat(d).slice(0, 15).map(function (a, b) {\n        switch ('undefined' == typeof a ? 'undefined' : j(a)) {\n          case 'object':\n            return f.default.createElement(g.default, {\n              data: a,\n              key: 'object-' + b\n            });\n          case 'function':\n            return '' + a;\n          default:\n            return a;\n        }\n      });\n      b(i);\n    }, Object.defineProperty(console[a], 'name', {\n      value: a,\n      writable: !1\n    });\n  }, a.isServer = function () {\n    return !('undefined' != typeof window && window.document);\n  }, a.getOs = function () {\n    var a = h.default.os;\n    return null !== a.family && 0 === a.family.indexOf('Windows') ? 'win' : null !== a.family && -1 < i.indexOf(a.family) ? 'linux' : null !== a.family && -1 < k.indexOf(a.family) ? 'darwin' : 'unknown';\n  };\n  var f = e(b),\n    g = e(c),\n    h = e(d),\n    j = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (a) {\n      return typeof a;\n    } : function (a) {\n      return a && 'function' == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? 'symbol' : typeof a;\n    };\n  (function () {\n    console.oldLog = console.log;\n  })();\n  var i = ['Ubuntu', 'Debian', 'Fedora', 'Red Hat', 'SuSE', 'Android'],\n    k = ['OS X', 'iOS'];\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;QAYgBA,a,GAAT,gBAA4C;IAEjDC,aAAkB,YAAa;MAAA;MAC7B,IAAI;QAAA;QACF,cAAQC,MAAR,oCACD;MAAA,CAAC,WAAU;QACV,MAAM,IAAIC,KAAJ,CAAU,sDAAV,CACP;MAAA;MACD,IAAMC,IAAM,aAAUC,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,EAAuBC,GAAvB,CAA2B,gBAAY;QACjD;UACE,KAAK,QAAL;YACE,OAAOC;cAAiBC,OAAjB;cAA4BC;YAA5B,EAAP;UACF,KAAK,UAAL;YACE;UACF;YACE;QANJ;MAQD,CATW,CAAZ;MAUAC,IACD;IAAA,CAnBgD,EAoBjDC,OAAOC,cAAP,CAAsBX,UAAtB,EAAuC,MAAvC,EAA+C;MAAEY,QAAF;MAAiBC;IAAjB,CAA/C,CACD;EAAA,C,IAEeC,Q,GAAT,YAAoB;IACzB,OAAO,EAAoB,WAAlB,WAAOC,MAAP,IAAiCA,OAAOC,QAA1C,CACR;EAAA,C,IAKeC,K,GAAT,YAAiB;IAAA,kBACdC,EADc;IAAA,OAEJ,IAAd,OAAGC,MAAH,IAAuD,CAAjC,OAAGA,MAAH,CAAUC,OAAV,CAAkB,SAAlB,CAFJ,GAGb,KAHa,GAKJ,IAAd,OAAGD,MAAH,IAA0D,CAAC,CAArC,KAAeC,OAAf,CAAuBC,EAAGF,MAA1B,CALJ,GAMb,OANa,GAQJ,IAAd,OAAGA,MAAH,IAA2D,CAAC,CAAtC,KAAgBC,OAAhB,CAAwBC,EAAGF,MAA3B,CARJ,GASb,QATa,GAWf,SACR;EAAA,C;;;;;;;;;EAhDA,aAAwB;IACvBnB,iBAAoBA,WACrB;EAAA,CAFA,G;EAiCD,IAAMG,gEAAN;IACMmB,mB","names":["handleLogging","console","oldLog","Error","i","slice","map","f","data","key","b","Object","defineProperty","value","writable","isServer","window","document","getOs","os","family","indexOf","a","k"],"sources":["../../src/js/utils.js"],"sourcesContent":["/* eslint-disable no-console */\nimport React from 'react'; // eslint-disable-line\nimport ObjectInspector from 'react-object-inspector';\nimport platform from 'platform';\n\n// Capture the console.log calls (hijacking)\n(function setOldLogger() {\n  console['oldLog'] = console['log']; // eslint-disable-line dot-notation\n}());\n\n// Handle console logging\n// eslint-disable-next-line import/prefer-default-export\nexport function handleLogging(method, addToOutput) {\n  // eslint-disable-next-line no-console\n  console[method] = (...args) => {\n    try {\n      console.oldLog(`[${method}]`, ...args);\n    } catch (e) {\n      throw new Error('Terminal was loaded more than once check script tags');\n    }\n    const res = [...args].slice(0, 15).map((arg, i) => {\n      switch (typeof arg) {\n        case 'object':\n          return <ObjectInspector data={arg} key={`object-${i}`} />;\n        case 'function':\n          return `${arg}`;\n        default:\n          return arg;\n      }\n    });\n    addToOutput(res);\n  };\n  Object.defineProperty(console[method], 'name', { value: method, writable: false }); // eslint-disable-line no-console\n}\n\nexport function isServer() {\n  return !(typeof window !== 'undefined' && window.document);\n}\n\nconst linuxPlatforms = ['Ubuntu', 'Debian', 'Fedora', 'Red Hat', 'SuSE', 'Android'];\nconst darwinPlatforms = ['OS X', 'iOS'];\n\nexport function getOs() {\n  const { os } = platform;\n  if (os.family !== null && os.family.indexOf('Windows') === 0) {\n    return 'win';\n  }\n  if (os.family !== null && linuxPlatforms.indexOf(os.family) > -1) {\n    return 'linux';\n  }\n  if (os.family !== null && darwinPlatforms.indexOf(os.family) > -1) {\n    return 'darwin';\n  }\n  return 'unknown';\n}\n"]},"metadata":{},"sourceType":"script"}