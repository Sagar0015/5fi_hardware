{"ast":null,"code":"import * as AuthType from './auth.types';\nexport const loadUserStart = () => ({\n  type: AuthType.LOAD_USER_START\n});\nexport const loadUserSuccess = currentUser => ({\n  type: AuthType.LOAD_USER_SUCCESS,\n  payload: currentUser\n});\nexport const loadUserFail = error => ({\n  type: AuthType.LOAD_USER_FAILURE,\n  payload: error\n});\nexport const signinStart = (formData, router) => ({\n  type: AuthType.SIGN_IN_START,\n  payload: {\n    formData,\n    router\n  }\n});\nexport const signinSuccess = currentUser => ({\n  type: AuthType.SIGN_IN_SUCCESS,\n  payload: currentUser\n});\nexport const signinFail = error => ({\n  type: AuthType.SIGN_IN_FAILURE,\n  payload: error\n});\nexport const signupStart = (formData, callback) => ({\n  type: AuthType.SIGN_UP_START,\n  payload: {\n    formData,\n    callback\n  }\n});\nexport const signupSuccess = user => ({\n  type: AuthType.SIGN_UP_SUCCESS,\n  payload: user\n});\nexport const signupFail = error => ({\n  type: AuthType.SIGN_UP_FAILURE,\n  payload: error\n});\nexport const verificationStart = (formData, callback) => ({\n  type: AuthType.VERIFICATION_START,\n  payload: {\n    formData,\n    callback\n  }\n});\nexport const verificationSuccess = user => ({\n  type: AuthType.VERIFICATION_SUCCESS,\n  payload: user\n});\nexport const verificationFail = error => ({\n  type: AuthType.VERIFICATION_FAIL,\n  payload: error\n});\nexport const signoutStart = history => ({\n  type: AuthType.SIGN_OUT_START,\n  payload: {\n    history\n  }\n});\nexport const signoutSuccess = () => ({\n  type: AuthType.SIGN_OUT_SUCCESS\n});\nexport const signoutFail = error => ({\n  type: AuthType.SIGN_OUT_FAILURE,\n  payload: error\n});\nexport const clearErrorLog = () => ({\n  type: AuthType.CLEAR_ERROR_LOG\n});","map":{"version":3,"sources":["/Users/azminds/Documents/five-g/frontend/src/store/auth/auth.actions.js"],"names":["AuthType","loadUserStart","type","LOAD_USER_START","loadUserSuccess","currentUser","LOAD_USER_SUCCESS","payload","loadUserFail","error","LOAD_USER_FAILURE","signinStart","formData","router","SIGN_IN_START","signinSuccess","SIGN_IN_SUCCESS","signinFail","SIGN_IN_FAILURE","signupStart","callback","SIGN_UP_START","signupSuccess","user","SIGN_UP_SUCCESS","signupFail","SIGN_UP_FAILURE","verificationStart","VERIFICATION_START","verificationSuccess","VERIFICATION_SUCCESS","verificationFail","VERIFICATION_FAIL","signoutStart","history","SIGN_OUT_START","signoutSuccess","SIGN_OUT_SUCCESS","signoutFail","SIGN_OUT_FAILURE","clearErrorLog","CLEAR_ERROR_LOG"],"mappings":"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","sourcesContent":["import * as AuthType from './auth.types';\n\nexport const loadUserStart = () => ({\n  type: AuthType.LOAD_USER_START\n});\n\nexport const loadUserSuccess = (currentUser) => ({\n  type: AuthType.LOAD_USER_SUCCESS,\n  payload: currentUser\n});\n\nexport const loadUserFail = (error) => ({\n  type: AuthType.LOAD_USER_FAILURE,\n  payload: error\n});\n\nexport const signinStart = (formData, router) => ({\n  type: AuthType.SIGN_IN_START,\n  payload: { formData, router }\n});\n\nexport const signinSuccess = (currentUser) => ({\n  type: AuthType.SIGN_IN_SUCCESS,\n  payload: currentUser\n});\n\nexport const signinFail = (error) => ({\n  type: AuthType.SIGN_IN_FAILURE,\n  payload: error\n});\n\nexport const signupStart = (formData, callback) => ({\n  type: AuthType.SIGN_UP_START,\n  payload: { formData, callback}\n});\n\nexport const signupSuccess = (user) => ({\n  type: AuthType.SIGN_UP_SUCCESS,\n  payload: user\n});\n\nexport const signupFail = (error) => ({\n  type: AuthType.SIGN_UP_FAILURE,\n  payload: error\n});\n\nexport const verificationStart = (formData, callback) => ({\n  type: AuthType.VERIFICATION_START,\n  payload: { formData, callback}\n});\n\nexport const verificationSuccess = (user) => ({\n  type: AuthType.VERIFICATION_SUCCESS,\n  payload: user\n});\n\nexport const verificationFail = (error) => ({\n  type: AuthType.VERIFICATION_FAIL,\n  payload: error\n});\n\nexport const signoutStart = (history) => ({\n  type: AuthType.SIGN_OUT_START,\n  payload: { history }\n});\n\nexport const signoutSuccess = () => ({\n  type: AuthType.SIGN_OUT_SUCCESS\n});\n\nexport const signoutFail = (error) => ({\n  type: AuthType.SIGN_OUT_FAILURE,\n  payload: error\n});\n\nexport const clearErrorLog = () => ({\n  type: AuthType.CLEAR_ERROR_LOG\n});\n"]},"metadata":{},"sourceType":"module"}