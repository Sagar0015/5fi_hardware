{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isArray from \"lodash/isArray\";\nimport _intersection from \"lodash/intersection\";\nimport shallowEqual from '../utils/shallowEqual';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { TREE_NODE_DROP_POSITION } from '../constants';\n// Tree Node 之间的 间隔\nvar TREE_NODE_GAP = 4;\n/**\n * Whether current node is visible\n * when all the parents of the current node is expanded, the current node should be visible\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n  var flattenData = [];\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n  var parents = [];\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n  traverse(node);\n  return parents;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\nexport function treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n  keys.forEach(function (key) {\n    if (!_isUndefined(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  if (!(_isArray(a) && _isArray(b))) {\n    return a !== b;\n  }\n  return !shallowEqualArray(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\nexport function getExpandAll(props) {\n  var expandAll = props.expandAll,\n    defaultExpandAll = props.defaultExpandAll;\n  return !_isUndefined(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n    defaultExpandItemValues = props.defaultExpandItemValues;\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\nexport function getExpandState(node, props) {\n  var _node$childrenKey;\n  var valueKey = props.valueKey,\n    childrenKey = props.childrenKey,\n    expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return shallowEqual(node[valueKey], value);\n  });\n  if (!_isUndefined(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!_isNil(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n    return false;\n  }\n  return false;\n}\n/**\n * 获取拖拽节点及子节点的key\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n    top = _treeNodeElement$getB.top,\n    bottom = _treeNodeElement$getB.bottom;\n  var gap = TREE_NODE_GAP; // 处于节点下方\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // 处于节点上方\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n    childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var item = items[_index];\n      if (shallowEqual(item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // 当 children 为空，需要删除 children 属性，不显示角标\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n        break;\n      }\n      if (Array.isArray(item[childrenKey])) {\n        traverse(item[childrenKey], item);\n      }\n    }\n  };\n  traverse(data);\n}\n/**\n * 移动节点valueKey，先删除 dragNode 原本所在的数据，再将 dragNode 移动到拖动的位置\n * @param data\n * @param params\n */\n\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n    childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n      dropNode = params.dropNode,\n      dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var item = items[_index2];\n        if (shallowEqual(item[valueKey], dropNode[valueKey])) {\n          // 拖拽到 dropNode内，作为 dropNode 的子节点\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            item[childrenKey] = _isNil(item[childrenKey]) ? [] : item[childrenKey];\n            item[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // 拖拽到 dropNode 的上面\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // 拖拽到 dropNode 的下面\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n        if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n          updateTree(item[childrenKey]);\n        }\n      }\n    };\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n    for (var i = 0; i < nodes.length; i += 1) {\n      var item = nodes[i];\n      if (_isArray(item.children)) {\n        var _node = findNode(item.children);\n        if (_node) {\n          return _node;\n        }\n      }\n      if (check(item)) {\n        return item;\n      }\n    }\n    return undefined;\n  };\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n    var nextNodes = [];\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n        if (nextChildren.length) {\n          var item = _clone(nodes[i]);\n          item.children = nextChildren;\n          nextNodes.push(item);\n          continue;\n        }\n      }\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n    return nextNodes;\n  };\n  return findNodes(data);\n}\n/**\n * 根据是否处于搜索状态来返回 expand 的值。如果处于搜索状态下，则展开所有的节点\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return !_isEmpty(searchKeyword) ? true : expand;\n}","map":{"version":3,"names":["_extends","_isEmpty","_clone","_isNil","_isUndefined","_isArray","_intersection","shallowEqual","shallowEqualArray","TREE_NODE_DROP_POSITION","TREE_NODE_GAP","shouldShowNodeByExpanded","expandItemValues","parentKeys","intersectionKeys","length","flattenTree","tree","childrenKey","executor","flattenData","traverse","data","parent","forEach","item","index","node","push","getNodeParents","parentKey","valueKey","parents","hasVisibleChildren","Array","isArray","some","child","visible","treeDeprecatedWarning","props","keys","key","console","warn","compareArray","a","b","getExpandAll","expandAll","defaultExpandAll","getExpandItemValues","defaultExpandItemValues","getExpandState","_node$childrenKey","expand","value","getDragNodeKeys","dragNode","dragNodeKeys","concat","calDropNodePosition","event","treeNodeElement","clientY","_treeNodeElement$getB","getBoundingClientRect","top","bottom","gap","DRAG_OVER_BOTTOM","DRAG_OVER_TOP","DRAG_OVER","removeDragNode","params","_ref","items","_index","splice","children","createUpdateTreeDataFunction","_ref2","dropNode","dropNodePosition","updateTree","_index2","findNodeOfTree","check","findNode","nodes","i","_node","undefined","filterNodesOfTree","findNodes","nextNodes","nextChildren","getExpandWhenSearching","searchKeyword"],"sources":["/Users/azminds/Documents/five-g/frontend/node_modules/rsuite/es/utils/treeUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _isArray from \"lodash/isArray\";\nimport _intersection from \"lodash/intersection\";\nimport shallowEqual from '../utils/shallowEqual';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { TREE_NODE_DROP_POSITION } from '../constants';\n// Tree Node 之间的 间隔\nvar TREE_NODE_GAP = 4;\n/**\n * Whether current node is visible\n * when all the parents of the current node is expanded, the current node should be visible\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * 拍平树结构为数组\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * 获取树节点所有的祖先节点\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node === null || node === void 0 ? void 0 : node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * 判断节点是否存在可见的子节点。\n * @param node\n */\n\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * 废弃 prop warning\n * @param prop\n */\n\nexport function treeDeprecatedWarning(props, keys) {\n  if (keys === void 0) {\n    keys = [];\n  }\n\n  keys.forEach(function (key) {\n    if (!_isUndefined(props[key])) {\n      console.warn(\"'Warning: \" + key + \" is deprecated and will be removed in a future release.'\");\n    }\n  });\n}\n/**\n * 浅比较两个数组是否不一样\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  if (!(_isArray(a) && _isArray(b))) {\n    return a !== b;\n  }\n\n  return !shallowEqualArray(a, b);\n}\n/**\n * 获取 expandAll 的 value\n * @param props\n */\n\nexport function getExpandAll(props) {\n  var expandAll = props.expandAll,\n      defaultExpandAll = props.defaultExpandAll;\n  return !_isUndefined(expandAll) ? expandAll : defaultExpandAll;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * 获取节点展开状态\n * @param node\n * @param props\n */\n\nexport function getExpandState(node, props) {\n  var _node$childrenKey;\n\n  var valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var expandAll = getExpandAll(props);\n  var expand = getExpandItemValues(props).some(function (value) {\n    return shallowEqual(node[valueKey], value);\n  });\n\n  if (!_isUndefined(expandItemValues)) {\n    return expand;\n  } else if ((_node$childrenKey = node[childrenKey]) === null || _node$childrenKey === void 0 ? void 0 : _node$childrenKey.length) {\n    if (!_isNil(node.expand)) {\n      return !!node.expand;\n    } else if (expandAll) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}\n/**\n * 获取拖拽节点及子节点的key\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // 处于节点下方\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // 处于节点上方\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var item = items[_index];\n\n      if (shallowEqual(item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // 当 children 为空，需要删除 children 属性，不显示角标\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(item[childrenKey])) {\n        traverse(item[childrenKey], item);\n      }\n    }\n  };\n\n  traverse(data);\n}\n/**\n * 移动节点valueKey，先删除 dragNode 原本所在的数据，再将 dragNode 移动到拖动的位置\n * @param data\n * @param params\n */\n\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var item = items[_index2];\n\n        if (shallowEqual(item[valueKey], dropNode[valueKey])) {\n          // 拖拽到 dropNode内，作为 dropNode 的子节点\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            item[childrenKey] = _isNil(item[childrenKey]) ? [] : item[childrenKey];\n            item[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // 拖拽到 dropNode 的上面\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // 拖拽到 dropNode 的下面\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(item[childrenKey]) && item[childrenKey].length > 0) {\n          updateTree(item[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var item = nodes[i];\n\n      if (_isArray(item.children)) {\n        var _node = findNode(item.children);\n\n        if (_node) {\n          return _node;\n        }\n      }\n\n      if (check(item)) {\n        return item;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var item = _clone(nodes[i]);\n\n          item.children = nextChildren;\n          nextNodes.push(item);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * 根据是否处于搜索状态来返回 expand 的值。如果处于搜索状态下，则展开所有的节点\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return !_isEmpty(searchKeyword) ? true : expand;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}