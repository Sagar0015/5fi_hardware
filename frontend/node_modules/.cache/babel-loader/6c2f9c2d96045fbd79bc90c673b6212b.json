{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports'], factory);else if ('undefined' != typeof exports) factory(exports);else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports), global.option = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  }), exports.default = function (name, description, defaultValue, init) {\n    var usage = [],\n      assignShort = function (n, options, short) {\n        return options.find(function (flagName) {\n          return flagName.usage[0] === short;\n        }) && (short = n.charAt(0).toUpperCase()), [short, n];\n      };\n    switch (name.constructor) {\n      case String:\n        usage = assignShort(name, this.details.options, name.charAt(0));\n        break;\n      case Array:\n        usage = usage.concat(name);\n        break;\n      default:\n        throw new Error('Invalid name for option');\n    }\n    if (0 < usage.length && 1 < usage[0].length) throw new Error('Short version of option is longer than 1 char');\n    var optionDetails = {\n      defaultValue: defaultValue,\n      usage: usage,\n      description: description\n    };\n    if (0 === this.details.options.filter(function (item) {\n      return item.usage[1] === usage[1];\n    }).length) {\n      var defaultIsWrong;\n      if (defaultIsWrong = !1 === defaultValue || null === defaultValue || void 0 === defaultValue, !defaultIsWrong) {\n        optionDetails.init = 'function' == typeof init ? init : this.handleType(defaultValue)[1];\n      }\n      this.details.options.push(optionDetails);\n    }\n    return this;\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;wBAAe,UAAUA,IAAV,EAAgBC,WAAhB,EAA6BC,YAA7B,EAA2CC,IAA3C,EAAiD;IAC9D,IAAIC,QAAQ,EAAZ;MAEMC,cAAc,UAACC,CAAD,EAAIC,OAAJ,EAAaC,KAAb,EAAuB;QAIzC,OAHID,QAAQE,IAAR,CAAa;UAAA,OAAYC,SAASN,KAAT,CAAe,CAAf,MAAsBI,KAAlC;QAAA,CAAb,CAGJ,KAFEA,QAAQF,EAAEK,MAAF,CAAS,CAAT,EAAYC,WAAZ,EAEV,GAAO,CAACJ,KAAD,EAAQF,CAAR,CACR;MAAA,CAPD;IAWA,QAAQN,KAAKa,WAAb;MACE,KAAKC,MAAL;QACEV,QAAQC,YAAYL,IAAZ,EAAkB,KAAKe,OAAL,CAAaR,OAA/B,EAAwCP,KAAKW,MAAL,CAAY,CAAZ,CAAxC,CADV;QAEE;MACF,KAAKK,KAAL;QACEZ,QAAQA,MAAMa,MAAN,CAAajB,IAAb,CADV;QAEE;MACF;QACE,MAAM,IAAIkB,KAAJ,CAAU,yBAAV,CAAN;IARJ;IAYA,IAAmB,CAAf,SAAMC,MAAN,IAAsC,CAAlB,SAAM,CAAN,EAASA,MAAjC,EACE,MAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;IAGF,IAAME,gBAAgB;MACpBlB,0BADoB;MAEpBE,YAFoB;MAGpBH;IAHoB,CAAtB;IAMA,IAA+E,CAA3E,UAAKc,OAAL,CAAaR,OAAb,CAAqBc,MAArB,CAA4B;MAAA,OAAQC,KAAKlB,KAAL,CAAW,CAAX,MAAkBA,MAAM,CAAN,CAA1B;IAAA,CAA5B,EAAgEe,MAApE,EAAkF;MAChF,IAAII,cAAJ;MAiBA,IAbIA,cAaJ,UAfQrB,YAeR,IAXO,IAWP,KAfQA,YAeR,eAfQA,YAeR,EAAI,CAACqB,cAAL,EAAqB;QAEnBH,cAAcjB,IAAd,GADqC,UAAhB,WAAOA,IACP,GAAeA,IAAf,GAAsB,KAAKqB,UAAL,CAAgBtB,YAAhB,EAA8B,CAA9B,CAC5C;MAAA;MAGD,KAAKa,OAAL,CAAaR,OAAb,CAAqBkB,IAArB,CAA0BL,aAA1B,CACD;IAAA;IAGD,OAAO,IACR;EAAA,C","names":["name","description","defaultValue","init","usage","assignShort","n","options","short","find","flagName","charAt","toUpperCase","constructor","String","details","Array","concat","Error","length","optionDetails","filter","item","defaultIsWrong","handleType","push"],"sources":["../../../src/js/args/option.js"],"sourcesContent":["export default function (name, description, defaultValue, init) {\n  let usage = [];\n\n  const assignShort = (n, options, short) => {\n    if (options.find(flagName => flagName.usage[0] === short)) {\n      short = n.charAt(0).toUpperCase(); // eslint-disable-line no-param-reassign\n    }\n    return [short, n];\n  };\n\n  // If name is an array, pick the values\n  // Otherwise just use the whole thing\n  switch (name.constructor) {\n    case String:\n      usage = assignShort(name, this.details.options, name.charAt(0));\n      break;\n    case Array:\n      usage = usage.concat(name);\n      break;\n    default:\n      throw new Error('Invalid name for option');\n  }\n\n  // Throw error if short option is too long\n  if (usage.length > 0 && usage[0].length > 1) {\n    throw new Error('Short version of option is longer than 1 char');\n  }\n\n  const optionDetails = {\n    defaultValue,\n    usage,\n    description,\n  };\n\n  if (this.details.options.filter(item => item.usage[1] === usage[1]).length === 0) {\n    let defaultIsWrong;\n\n    switch (defaultValue) {\n      case false:\n        defaultIsWrong = true;\n        break;\n      case null:\n        defaultIsWrong = true;\n        break;\n      case undefined:\n        defaultIsWrong = true;\n        break;\n      default:\n        defaultIsWrong = false;\n    }\n\n    // Set initializer depending on type of default value\n    if (!defaultIsWrong) {\n      const initFunction = typeof init === 'function';\n      optionDetails.init = initFunction ? init : this.handleType(defaultValue)[1];\n    }\n\n    // Register option to global scope\n    this.details.options.push(optionDetails);\n  }\n\n  // Allow chaining of .option()\n  return this;\n}\n"]},"metadata":{},"sourceType":"script"}