{"ast":null,"code":"var _forEach = require('lodash.foreach');\nvar _map = require('lodash.map');\nvar _every = require('lodash.every');\nvar _maxBy = require('lodash.maxby');\nvar _flattenDeep = require('lodash.flattendeep');\nexports.compareTwoStrings = compareTwoStrings;\nexports.findBestMatch = findBestMatch;\nfunction compareTwoStrings(str1, str2) {\n  var result = null;\n  result = calculateResultIfIdentical(str1, str2);\n  if (result != null) {\n    return result;\n  }\n  result = calculateResultIfEitherIsEmpty(str1, str2);\n  if (result != null) {\n    return result;\n  }\n  result = calculateResultIfBothAreSingleCharacter(str1, str2);\n  if (result != null) {\n    return result;\n  }\n  var pairs1 = wordLetterPairs(str1.toUpperCase());\n  var pairs2 = wordLetterPairs(str2.toUpperCase());\n  var intersection = 0;\n  var union = pairs1.length + pairs2.length;\n  _forEach(pairs1, function (pair1) {\n    for (var i = 0; i < pairs2.length; i++) {\n      var pair2 = pairs2[i];\n      if (pair1 === pair2) {\n        intersection++;\n        pairs2.splice(i, 1);\n        break;\n      }\n    }\n  });\n  return 2.0 * intersection / union;\n\n  // private functions ---------------------------\n  function letterPairs(str) {\n    var numPairs = str.length - 1;\n    var pairs = [];\n    for (var i = 0; i < numPairs; i++) {\n      pairs[i] = str.substring(i, i + 2);\n    }\n    return pairs;\n  }\n  function wordLetterPairs(str) {\n    return _flattenDeep(_map(str.split(' '), letterPairs));\n  }\n  function calculateResultIfIdentical(str1, str2) {\n    if (str1.toUpperCase() == str2.toUpperCase()) {\n      return 1;\n    }\n    return null;\n  }\n  function calculateResultIfBothAreSingleCharacter(str1, str2) {\n    if (str1.length == 1 && str2.length == 1) {\n      return 0;\n    }\n  }\n  function calculateResultIfEitherIsEmpty(str1, str2) {\n    // if both are empty strings\n    if (str1.length == 0 && str2.length == 0) {\n      return 1;\n    }\n\n    // if only one is empty string\n    if (str1.length + str2.length > 0 && str1.length * str2.length == 0) {\n      return 0;\n    }\n    return null;\n  }\n}\nfunction findBestMatch(mainString, targetStrings) {\n  if (!areArgsValid(mainString, targetStrings)) {\n    throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n  }\n  var ratings = _map(targetStrings, function (targetString) {\n    return {\n      target: targetString,\n      rating: compareTwoStrings(mainString, targetString)\n    };\n  });\n  return {\n    ratings: ratings,\n    bestMatch: _maxBy(ratings, 'rating')\n  };\n\n  // private functions ---------------------------\n  function areArgsValid(mainString, targetStrings) {\n    var mainStringIsAString = typeof mainString === 'string';\n    var targetStringsIsAnArrayOfStrings = Array.isArray(targetStrings) && targetStrings.length > 0 && _every(targetStrings, function (targetString) {\n      return typeof targetString === 'string';\n    });\n    return mainStringIsAString && targetStringsIsAnArrayOfStrings;\n  }\n}","map":{"version":3,"names":["_forEach","require","_map","_every","_maxBy","_flattenDeep","exports","compareTwoStrings","findBestMatch","str1","str2","result","calculateResultIfIdentical","calculateResultIfEitherIsEmpty","calculateResultIfBothAreSingleCharacter","pairs1","wordLetterPairs","toUpperCase","pairs2","intersection","union","length","pair1","i","pair2","splice","letterPairs","str","numPairs","pairs","substring","split","mainString","targetStrings","areArgsValid","Error","ratings","targetString","target","rating","bestMatch","mainStringIsAString","targetStringsIsAnArrayOfStrings","Array","isArray"],"sources":["/Users/azminds/Documents/five-g/frontend/node_modules/string-similarity/compare-strings.js"],"sourcesContent":["var _forEach = require('lodash.foreach');\nvar _map = require('lodash.map');\nvar _every = require('lodash.every');\nvar _maxBy = require('lodash.maxby');\nvar _flattenDeep = require('lodash.flattendeep');\n\nexports.compareTwoStrings = compareTwoStrings;\nexports.findBestMatch = findBestMatch;\n\nfunction compareTwoStrings(str1, str2) {\n  var result = null;\n  result = calculateResultIfIdentical(str1, str2);\n  if (result != null) {\n    return result;\n  }\n  result = calculateResultIfEitherIsEmpty(str1, str2);\n  if (result != null) {\n    return result;\n  }\n  result = calculateResultIfBothAreSingleCharacter(str1, str2);\n  if (result != null) {\n    return result;\n  }\n\n  var pairs1 = wordLetterPairs(str1.toUpperCase());\n  var pairs2 = wordLetterPairs(str2.toUpperCase());\n  var intersection = 0;\n  var union = pairs1.length + pairs2.length;\n\n  _forEach(pairs1, function (pair1) {\n    for(var i = 0; i < pairs2.length; i++) {\n      var pair2 = pairs2[i];\n      if (pair1 === pair2) {\n        intersection++;\n        pairs2.splice(i, 1);\n        break;\n      }\n    }\n  });\n\n  return (2.0 * intersection) / union;\n\n  // private functions ---------------------------\n  function letterPairs(str) {\n    var numPairs = str.length - 1;\n    var pairs = [];\n    for(var i = 0; i < numPairs; i++) {\n      pairs[i] = str.substring(i, i + 2);\n    }\n    return pairs;\n  }\n\n  function wordLetterPairs(str) {\n    return _flattenDeep(_map(str.split(' '), letterPairs));\n  }\n\n  function calculateResultIfIdentical(str1, str2) {\n    if (str1.toUpperCase() == str2.toUpperCase()) {\n      return 1;\n    }\n    return null;\n  }\n\n  function calculateResultIfBothAreSingleCharacter(str1, str2) {\n    if (str1.length == 1 && str2.length == 1) {\n      return 0;\n    }\n  }\n\n  function calculateResultIfEitherIsEmpty(str1, str2) {\n    // if both are empty strings\n    if (str1.length == 0 && str2.length == 0) {\n      return 1;\n    }\n\n    // if only one is empty string\n    if ((str1.length + str2.length) > 0 && (str1.length * str2.length) == 0) {\n      return 0;\n    }\n    return null;\n  }\n}\n\n\nfunction findBestMatch(mainString, targetStrings) {\n  if (!areArgsValid(mainString, targetStrings)) {\n    throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n  }\n  var ratings = _map(targetStrings, function (targetString) {\n    return {\n      target: targetString,\n      rating: compareTwoStrings(mainString, targetString)\n    };\n  });\n\n  return {\n    ratings: ratings,\n    bestMatch: _maxBy(ratings, 'rating')\n  };\n\n  // private functions ---------------------------\n  function areArgsValid(mainString, targetStrings) {\n    var mainStringIsAString = (typeof mainString === 'string');\n\n    var targetStringsIsAnArrayOfStrings = Array.isArray(targetStrings) &&\n      targetStrings.length > 0 &&\n      _every(targetStrings, function (targetString) {\n        return (typeof targetString === 'string');\n      });\n\n    return mainStringIsAString && targetStringsIsAnArrayOfStrings;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}