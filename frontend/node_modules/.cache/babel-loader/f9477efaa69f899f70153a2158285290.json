{"ast":null,"code":"module.exports = function (hljs) {\n  var KEYWORDS = 'for let if while then else return where group by xquery encoding version' + 'module namespace boundary-space preserve strip default collation base-uri ordering' + 'copy-namespaces order declare import schema namespace function option in allowing empty' + 'at tumbling window sliding window start when only end when previous next stable ascending' + 'descending empty greatest least some every satisfies switch case typeswitch try catch and' + 'or to union intersect instance of treat as castable cast map array delete insert into' + 'replace value rename copy modify update';\n  var LITERAL = 'false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute';\n  var VAR = {\n    begin: /\\$[a-zA-Z0-9\\-]+/\n  };\n  var NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n    relevance: 0\n  };\n  var STRING = {\n    className: 'string',\n    variants: [{\n      begin: /\"/,\n      end: /\"/,\n      contains: [{\n        begin: /\"\"/,\n        relevance: 0\n      }]\n    }, {\n      begin: /'/,\n      end: /'/,\n      contains: [{\n        begin: /''/,\n        relevance: 0\n      }]\n    }]\n  };\n  var ANNOTATION = {\n    className: 'meta',\n    begin: '%\\\\w+'\n  };\n  var COMMENT = {\n    className: 'comment',\n    begin: '\\\\(:',\n    end: ':\\\\)',\n    relevance: 10,\n    contains: [{\n      className: 'doctag',\n      begin: '@\\\\w+'\n    }]\n  };\n  var METHOD = {\n    begin: '{',\n    end: '}'\n  };\n  var CONTAINS = [VAR, STRING, NUMBER, COMMENT, ANNOTATION, METHOD];\n  METHOD.contains = CONTAINS;\n  return {\n    aliases: ['xpath', 'xq'],\n    case_insensitive: false,\n    lexemes: /[a-zA-Z\\$][a-zA-Z0-9_:\\-]*/,\n    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,\n    keywords: {\n      keyword: KEYWORDS,\n      literal: LITERAL\n    },\n    contains: CONTAINS\n  };\n};","map":{"version":3,"names":["module","exports","hljs","KEYWORDS","LITERAL","VAR","begin","NUMBER","className","relevance","STRING","variants","end","contains","ANNOTATION","COMMENT","METHOD","CONTAINS","aliases","case_insensitive","lexemes","illegal","keywords","keyword","literal"],"sources":["/Users/azminds/Documents/five-g/frontend/node_modules/terminal-in-react-pseudo-file-system-plugin/node_modules/highlight.js/lib/languages/xquery.js"],"sourcesContent":["module.exports = function(hljs) {\n  var KEYWORDS = 'for let if while then else return where group by xquery encoding version' +\n    'module namespace boundary-space preserve strip default collation base-uri ordering' +\n    'copy-namespaces order declare import schema namespace function option in allowing empty' +\n    'at tumbling window sliding window start when only end when previous next stable ascending' +\n    'descending empty greatest least some every satisfies switch case typeswitch try catch and' +\n    'or to union intersect instance of treat as castable cast map array delete insert into' +\n    'replace value rename copy modify update';\n  var LITERAL = 'false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute';\n  var VAR = {\n    begin: /\\$[a-zA-Z0-9\\-]+/\n  };\n\n  var NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n    relevance: 0\n  };\n\n  var STRING = {\n    className: 'string',\n    variants: [\n      {begin: /\"/, end: /\"/, contains: [{begin: /\"\"/, relevance: 0}]},\n      {begin: /'/, end: /'/, contains: [{begin: /''/, relevance: 0}]}\n    ]\n  };\n\n  var ANNOTATION = {\n    className: 'meta',\n    begin: '%\\\\w+'\n  };\n\n  var COMMENT = {\n    className: 'comment',\n    begin: '\\\\(:', end: ':\\\\)',\n    relevance: 10,\n    contains: [\n      {\n        className: 'doctag', begin: '@\\\\w+'\n      }\n    ]\n  };\n\n  var METHOD = {\n    begin: '{', end: '}'\n  };\n\n  var CONTAINS = [\n    VAR,\n    STRING,\n    NUMBER,\n    COMMENT,\n    ANNOTATION,\n    METHOD\n  ];\n  METHOD.contains = CONTAINS;\n\n\n  return {\n    aliases: ['xpath', 'xq'],\n    case_insensitive: false,\n    lexemes: /[a-zA-Z\\$][a-zA-Z0-9_:\\-]*/,\n    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,\n    keywords: {\n      keyword: KEYWORDS,\n      literal: LITERAL\n    },\n    contains: CONTAINS\n  };\n};"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAG,UAASC,IAAI,EAAE;EAC9B,IAAIC,QAAQ,GAAG,0EAA0E,GACvF,oFAAoF,GACpF,yFAAyF,GACzF,2FAA2F,GAC3F,2FAA2F,GAC3F,uFAAuF,GACvF,yCAAyC;EAC3C,IAAIC,OAAO,GAAG,0JAA0J;EACxK,IAAIC,GAAG,GAAG;IACRC,KAAK,EAAE;EACT,CAAC;EAED,IAAIC,MAAM,GAAG;IACXC,SAAS,EAAE,QAAQ;IACnBF,KAAK,EAAE,2EAA2E;IAClFG,SAAS,EAAE;EACb,CAAC;EAED,IAAIC,MAAM,GAAG;IACXF,SAAS,EAAE,QAAQ;IACnBG,QAAQ,EAAE,CACR;MAACL,KAAK,EAAE,GAAG;MAAEM,GAAG,EAAE,GAAG;MAAEC,QAAQ,EAAE,CAAC;QAACP,KAAK,EAAE,IAAI;QAAEG,SAAS,EAAE;MAAC,CAAC;IAAC,CAAC,EAC/D;MAACH,KAAK,EAAE,GAAG;MAAEM,GAAG,EAAE,GAAG;MAAEC,QAAQ,EAAE,CAAC;QAACP,KAAK,EAAE,IAAI;QAAEG,SAAS,EAAE;MAAC,CAAC;IAAC,CAAC;EAEnE,CAAC;EAED,IAAIK,UAAU,GAAG;IACfN,SAAS,EAAE,MAAM;IACjBF,KAAK,EAAE;EACT,CAAC;EAED,IAAIS,OAAO,GAAG;IACZP,SAAS,EAAE,SAAS;IACpBF,KAAK,EAAE,MAAM;IAAEM,GAAG,EAAE,MAAM;IAC1BH,SAAS,EAAE,EAAE;IACbI,QAAQ,EAAE,CACR;MACEL,SAAS,EAAE,QAAQ;MAAEF,KAAK,EAAE;IAC9B,CAAC;EAEL,CAAC;EAED,IAAIU,MAAM,GAAG;IACXV,KAAK,EAAE,GAAG;IAAEM,GAAG,EAAE;EACnB,CAAC;EAED,IAAIK,QAAQ,GAAG,CACbZ,GAAG,EACHK,MAAM,EACNH,MAAM,EACNQ,OAAO,EACPD,UAAU,EACVE,MAAM,CACP;EACDA,MAAM,CAACH,QAAQ,GAAGI,QAAQ;EAG1B,OAAO;IACLC,OAAO,EAAE,CAAC,OAAO,EAAE,IAAI,CAAC;IACxBC,gBAAgB,EAAE,KAAK;IACvBC,OAAO,EAAE,4BAA4B;IACrCC,OAAO,EAAE,yCAAyC;IAClDC,QAAQ,EAAE;MACRC,OAAO,EAAEpB,QAAQ;MACjBqB,OAAO,EAAEpB;IACX,CAAC;IACDS,QAAQ,EAAEI;EACZ,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script"}