{"ast":null,"code":"(function (a, b) {\n  if ('function' == typeof define && define.amd) define(['exports', 'minimist'], b);else if ('undefined' != typeof exports) b(exports, require('minimist'));else {\n    var c = {\n      exports: {}\n    };\n    b(c.exports, a.minimist), a.parse = c.exports;\n  }\n})(this, function (a, b) {\n  'use strict';\n\n  Object.defineProperty(a, '__esModule', {\n    value: !0\n  }), a.default = function (a, b) {\n    Object.assign(this.config, b), this.config.help && (this.option('help', 'Output usage information'), this.command('help', 'Display help', this.showHelp)), this.raw = (0, c.default)(a.slice(1), this.config.minimist), this.config.version && this.checkVersion(this.parent);\n    var d = this.raw._[1],\n      e = this.raw.h || this.raw.help,\n      f = {},\n      g = this.isDefined(d, 'commands'),\n      h = this.getOptions(g);\n    return (Object.assign(f, this.raw), f._.shift(), this.sub = f._, g) ? (this.runCommand(g, h), {}) : (this.config.help && e && this.showHelp(), h);\n  };\n  var c = function (a) {\n    return a && a.__esModule ? a : {\n      default: a\n    };\n  }(b);\n});","map":{"version":3,"mappings":";;;;;;;;;;;;kBAEe,gBAAyB;IAEtCA,OAAOC,MAAP,CAAc,KAAKC,MAAnB,IAFsC,EAIlC,KAAKA,MAAL,CAAYC,IAJsB,KAMpC,KAAKC,MAAL,CAAY,MAAZ,EAAoB,0BAApB,CANoC,EAOpC,KAAKC,OAAL,CAAa,MAAb,EAAqB,cAArB,EAAqC,KAAKC,QAA1C,CAPoC,GAWtC,KAAKC,GAAL,GAAW,eAAOC,EAAKC,KAAL,CAAW,CAAX,CAAP,EAAsB,KAAKP,MAAL,CAAYQ,QAAlC,CAX2B,EAclC,KAAKR,MAAL,CAAYS,OAdsB,IAepC,KAAKC,YAAL,CAAkB,KAAKC,MAAvB,CAfoC;IAkBtC,IAAMC,IAAa,KAAKP,GAAL,CAASQ,CAAT,CAAW,CAAX,CAAnB;MACMC,IAAgB,KAAKT,GAAL,CAASU,CAAT,IAAc,KAAKV,GAAL,CAASJ,IAD7C;MAGMe,MAHN;MAIMC,IAAU,KAAKC,SAAL,IAA2B,UAA3B,CAJhB;MAKMH,IAAa,KAAKI,UAAL,GALnB;IAlBsC,QAyBtCrB,OAAOC,MAAP,IAAoB,KAAKM,GAAzB,CAzBsC,EA0BtCW,EAAKH,CAAL,CAAOO,KAAP,EA1BsC,EA6BtC,KAAKC,GAAL,GAAWL,EAAKH,CA7BsB,QAiCpC,KAAKS,UAAL,MAjCoC,SAuClC,KAAKtB,MAAL,CAAYC,IAAZ,KAvCkC,IAwCpC,KAAKG,QAAL,EAxCoC,IA6CvC;EAAA,C","names":["Object","assign","config","help","option","command","showHelp","raw","a","slice","minimist","version","checkVersion","parent","d","_","e","h","f","g","isDefined","getOptions","shift","sub","runCommand"],"sources":["../../../src/js/args/parse.js"],"sourcesContent":["import parser from 'minimist';\n\nexport default function (argv, options) {\n  // Override default option values\n  Object.assign(this.config, options);\n\n  if (this.config.help) {\n    // Register default options and commands\n    this.option('help', 'Output usage information');\n    this.command('help', 'Display help', this.showHelp);\n  }\n\n  // Parse arguments using minimist\n  this.raw = parser(argv.slice(1), this.config.minimist);\n\n  // If default version is allowed, check for it\n  if (this.config.version) {\n    this.checkVersion(this.parent);\n  }\n\n  const subCommand = this.raw._[1];\n  const helpTriggered = this.raw.h || this.raw.help;\n\n  const args = {};\n  const defined = this.isDefined(subCommand, 'commands');\n  const optionList = this.getOptions(defined);\n\n  Object.assign(args, this.raw);\n  args._.shift();\n\n  // Export sub arguments of command\n  this.sub = args._;\n\n  // If sub command is defined, run it\n  if (defined) {\n    this.runCommand(defined, optionList);\n    return {};\n  }\n\n  // Show usage information if \"help\" or \"h\" option was used\n  // And respect the option related to it\n  if (this.config.help && helpTriggered) {\n    this.showHelp();\n  }\n\n  // Hand back list of options\n  return optionList;\n}\n"]},"metadata":{},"sourceType":"script"}