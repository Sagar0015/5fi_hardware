{"ast":null,"code":"(function (a, b) {\n  if ('function' == typeof define && define.amd) define(['exports', 'lodash.camelcase', 'string-similarity'], b);else if ('undefined' != typeof exports) b(exports, require('lodash.camelcase'), require('string-similarity'));else {\n    var c = {\n      exports: {}\n    };\n    b(c.exports, a.lodash, a.stringSimilarity), a.utils = c.exports;\n  }\n})(this, function (a, b, c) {\n  'use strict';\n\n  function d(a) {\n    return a && a.__esModule ? a : {\n      default: a\n    };\n  }\n  function e(a) {\n    if (Array.isArray(a)) {\n      for (var b = 0, c = Array(a.length); b < a.length; b++) c[b] = a[b];\n      return c;\n    }\n    return Array.from(a);\n  }\n  Object.defineProperty(a, '__esModule', {\n    value: !0\n  });\n  var f = d(b),\n    g = d(c),\n    h = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (a) {\n      return typeof a;\n    } : function (a) {\n      return a && 'function' == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? 'symbol' : typeof a;\n    };\n  a.default = {\n    handleType: function handleType(a) {\n      var b = a;\n      return 'function' != typeof a && (b = a.constructor), b === String ? ['[value]'] : b === Array ? ['<list>'] : b === Number || b === parseInt ? ['<n>', parseInt] : [''];\n    },\n    readOption: function readOption(a) {\n      var b = a.defaultValue,\n        c = {},\n        d = !0,\n        e = !1,\n        g = void 0;\n      try {\n        for (var i, j = a.usage[Symbol.iterator](); !(d = (i = j.next()).done); d = !0) {\n          var r = i.value,\n            s = this.raw[r];\n          'undefined' != typeof s && (b = s);\n        }\n      } catch (a) {\n        e = !0, g = a;\n      } finally {\n        try {\n          !d && j.return && j.return();\n        } finally {\n          if (e) throw g;\n        }\n      }\n      var k = -1,\n        l = !0,\n        m = !1,\n        n = void 0;\n      try {\n        for (var o, p, q = a.usage[Symbol.iterator](); !(l = (o = q.next()).done); l = !0) {\n          p = o.value, k += 1;\n          var t = b;\n          Array.isArray(a.defaultValue) && ('undefined' == typeof t ? 'undefined' : h(t)) !== h(a.defaultValue) && (0 == k && this.raw._.push(t), t = [t]), 'undefined' != typeof a.defaultValue && ('undefined' == typeof t ? 'undefined' : h(t)) !== h(a.defaultValue) && (0 == k && this.raw._.push(t), t = a.defaultValue);\n          var u = !0;\n          a.init && (a.init === toString && (u = t.constructor === Number), u && (t = a.init(t))), 1 < p.length && (p = (0, f.default)(p)), c[p] = t;\n        }\n      } catch (a) {\n        m = !0, n = a;\n      } finally {\n        try {\n          !l && q.return && q.return();\n        } finally {\n          if (m) throw n;\n        }\n      }\n      return c;\n    },\n    getOptions: function getOptions(a) {\n      var b = this,\n        c = {},\n        d = {},\n        f = !0,\n        h = !1,\n        i = void 0;\n      try {\n        for (var j, k, l = this.details.options[Symbol.iterator](); !(f = (j = l.next()).done); f = !0) (k = j.value, 'undefined' != typeof k.defaultValue) && Object.assign(c, this.readOption(k));\n      } catch (a) {\n        h = !0, i = a;\n      } finally {\n        try {\n          !f && l.return && l.return();\n        } finally {\n          if (h) throw i;\n        }\n      }\n      Object.assign(d, this.raw);\n      var m = [].concat(e(d._));\n      for (var o in delete d._, d) if ({}.hasOwnProperty.call(d, o)) {\n        var n = this.isDefined(o, 'options');\n        if (n) {\n          var p = this.readOption(n);\n          Object.assign(c, p);\n        }\n        n || a || function () {\n          var a = [];\n          b.details.options.forEach(function (b) {\n            a.push.apply(a, e(b.usage));\n          });\n          var c = g.default.findBestMatch(o, a);\n          if (console.log('The option \"' + o + '\" is unknown.'), 0.5 <= c.bestMatch.rating) {\n            console.log(' Did you mean the following one?\\n');\n            var d = b.details.options.filter(function (a) {\n              var b = !0,\n                d = !1,\n                e = void 0;\n              try {\n                for (var f, g, h = a.usage[Symbol.iterator](); !(b = (f = h.next()).done); b = !0) if (g = f.value, g === c.bestMatch.target) return !0;\n              } catch (a) {\n                d = !0, e = a;\n              } finally {\n                try {\n                  !b && h.return && h.return();\n                } finally {\n                  if (d) throw e;\n                }\n              }\n              return !1;\n            });\n            console.log(b.generateDetails(d)[0].trim() + '\\n');\n          } else console.log(' Here\\'s a list of all available options: \\n'), b.showHelp();\n        }();\n      }\n      return c._ = m, c;\n    },\n    generateExamples: function generateExamples() {\n      var a = this.details.examples,\n        b = [];\n      for (var e in a) if ({}.hasOwnProperty.call(a, e)) {\n        var c = this.printSubColor('$ ' + a[e].usage),\n          d = this.printMainColor('- ' + a[e].description);\n        b.push('  ' + d + '\\n\\n    ' + c + '\\n\\n');\n      }\n      return b;\n    },\n    generateDetails: function generateDetails(a) {\n      var b = 'string' == typeof a ? [].concat(e(this.details[a])) : [].concat(e(a)),\n        c = [],\n        d = 'commands' === a;\n      for (var n in b.sort(function (c, a) {\n        var b = d ? c.usage : c.usage[1],\n          e = d ? a.usage : a.usage[1];\n        switch (!0) {\n          case b < e:\n            return -1;\n          case b > e:\n            return 1;\n          default:\n            return 0;\n        }\n      }), b) if ({}.hasOwnProperty.call(b, n)) {\n        var f = b[n].usage,\n          g = b[n].defaultValue;\n        if (f.constructor === Array) if (d) f = f.join(', ');else {\n          var o = f.indexOf('v');\n          f = '-' + f[0] + ', --' + f[1], g || (g = b[n].init), f += g && -1 === o ? ' ' + this.handleType(g)[0] : '';\n        }\n        b[n].usage = f;\n      }\n      var h = b.slice().sort(function (c, a) {\n          return a.usage.length - c.usage.length;\n        })[0].usage.length,\n        i = !0,\n        j = !1,\n        k = void 0;\n      try {\n        for (var l, m = b[Symbol.iterator](); !(i = (l = m.next()).done); i = !0) {\n          var p = l.value,\n            q = p.usage,\n            r = p.description,\n            s = p.defaultValue,\n            t = h - q.length;\n          q += ' '.repeat(t), 'undefined' != typeof s && ('boolean' == typeof s ? r += ' (' + (s ? 'enabled' : 'disabled') + ' by default)' : r += ' (defaults to ' + JSON.stringify(s) + ')'), c.push('  ' + this.printMainColor(q) + '  ' + this.printSubColor(r));\n        }\n      } catch (a) {\n        j = !0, k = a;\n      } finally {\n        try {\n          !i && m.return && m.return();\n        } finally {\n          if (j) throw k;\n        }\n      }\n      return c;\n    },\n    runCommand: function runCommand(a, b) {\n      if ('help' !== a.usage || this.config.help || (a.init = !1), a.init) {\n        var c = [].concat(this.sub);\n        return c.shift(), a.init.bind(this)(a.usage, c, b);\n      }\n      return '';\n    },\n    isDefined: function isDefined(a, b) {\n      var c = this.details[b],\n        d = !0,\n        e = !1,\n        f = void 0;\n      try {\n        for (var g, h = c[Symbol.iterator](); !(d = (g = h.next()).done); d = !0) {\n          var i = g.value,\n            j = i.usage,\n            k = j.constructor;\n          if (k === Array && -1 < j.indexOf(a)) return i;\n          if (k === String && j === a) return i;\n        }\n      } catch (a) {\n        e = !0, f = a;\n      } finally {\n        try {\n          !d && h.return && h.return();\n        } finally {\n          if (e) throw f;\n        }\n      }\n      return !1;\n    }\n  };\n});","map":{"version":3,"mappings":"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","names":["handleType","b","a","constructor","String","Array","Number","parseInt","readOption","defaultValue","c","d","e","g","usage","s","raw","k","l","m","n","p","t","isArray","_","push","u","init","toString","length","getOptions","f","h","i","details","options","Object","assign","o","hasOwnProperty","call","isDefined","forEach","findBestMatch","console","log","bestMatch","rating","filter","target","generateDetails","trim","showHelp","generateExamples","examples","printSubColor","printMainColor","description","sort","join","indexOf","slice","j","q","r","repeat","JSON","stringify","runCommand","config","help","concat","sub","shift","bind"],"sources":["../../../src/js/args/utils.js"],"sourcesContent":["import camelcase from 'lodash.camelcase';\nimport stringSimilarity from 'string-similarity';\n\nexport default {\n  handleType(value) {\n    let type = value;\n    if (typeof value !== 'function') {\n      type = value.constructor;\n    }\n\n    // Depending on the type of the default value,\n    // select a default initializer function\n    switch (type) {\n      case String:\n        return ['[value]'];\n      case Array:\n        return ['<list>'];\n      case Number:\n      case parseInt:\n        return ['<n>', parseInt];\n      default:\n        return [''];\n    }\n  },\n\n  readOption(option) {\n    let value = option.defaultValue;\n    const contents = {};\n\n    // If option has been used, get its value\n    for (const name of option.usage) {\n      const fromArgs = this.raw[name];\n      if (typeof fromArgs !== 'undefined') {\n        value = fromArgs;\n      }\n    }\n\n    let count = -1;\n    // Process the option's value\n    for (let name of option.usage) {\n      count += 1;\n      let propVal = value;\n\n      // Convert the value to an array when the option is called just once\n      if (\n        Array.isArray(option.defaultValue) &&\n        typeof propVal !== typeof option.defaultValue\n      ) {\n        if (count === 0) {\n          this.raw._.push(propVal);\n        }\n        propVal = [propVal];\n      }\n\n      if (\n        typeof option.defaultValue !== 'undefined' &&\n        typeof propVal !== typeof option.defaultValue\n      ) {\n        if (count === 0) {\n          this.raw._.push(propVal);\n        }\n        propVal = option.defaultValue;\n      }\n\n      let condition = true;\n\n      if (option.init) {\n        // Only use the toString initializer if value is a number\n        if (option.init === toString) {\n          condition = propVal.constructor === Number;\n        }\n\n        if (condition) {\n          // Pass it through the initializer\n          propVal = option.init(propVal);\n        }\n      }\n\n      // Camelcase option name (skip short flag)\n      if (name.length > 1) {\n        name = camelcase(name);\n      }\n\n      // Add option to list\n      contents[name] = propVal;\n    }\n\n    return contents;\n  },\n\n  getOptions(definedSubcommand) {\n    const options = {};\n    const args = {};\n\n    // Set option defaults\n    for (const option of this.details.options) {\n      if (typeof option.defaultValue === 'undefined') {\n        continue; // eslint-disable-line\n      }\n\n      Object.assign(options, this.readOption(option));\n    }\n\n    // Copy over the arguments\n    Object.assign(args, this.raw);\n    const _ = [...args._];\n    delete args._;\n\n    // Override defaults if used in command line\n    for (const option in args) {\n      if (!{}.hasOwnProperty.call(args, option)) {\n        continue; // eslint-disable-line\n      }\n      const related = this.isDefined(option, 'options');\n\n      if (related) {\n        const details = this.readOption(related);\n        Object.assign(options, details);\n      }\n\n      if (!related && !definedSubcommand) {\n        // Unknown Option\n        const availableOptions = [];\n        this.details.options.forEach((opt) => {\n          availableOptions.push(...opt.usage);\n        });\n\n        const suggestOption = stringSimilarity.findBestMatch(\n          option,\n          availableOptions,\n        );\n\n        console.log(`The option \"${option}\" is unknown.`); // eslint-disable-line\n\n        if (suggestOption.bestMatch.rating >= 0.5) {\n          console.log(' Did you mean the following one?\\n'); // eslint-disable-line\n\n          const suggestion = this.details.options.filter((item) => {\n            for (const flag of item.usage) {\n              if (flag === suggestOption.bestMatch.target) {\n                return true;\n              }\n            }\n\n            return false;\n          });\n\n          console.log(`${this.generateDetails(suggestion)[0].trim()}\\n`); // eslint-disable-line\n        } else {\n          console.log(' Here\\'s a list of all available options: \\n'); // eslint-disable-line\n          this.showHelp();\n        }\n      }\n    }\n\n    options._ = _;\n    return options;\n  },\n\n  generateExamples() {\n    const examples = this.details.examples;\n    const parts = [];\n\n    for (const item in examples) {\n      if (!{}.hasOwnProperty.call(examples, item)) {\n        continue; // eslint-disable-line\n      }\n      const usage = this.printSubColor(`$ ${examples[item].usage}`);\n      const description = this.printMainColor(\n        `- ${examples[item].description}`,\n      );\n      parts.push(`  ${description}\\n\\n    ${usage}\\n\\n`);\n    }\n\n    return parts;\n  },\n\n  generateDetails(kind) {\n    // Get all properties of kind from global scope\n    const items = typeof kind === 'string' ? [...this.details[kind]] : [...kind];\n    const parts = [];\n    const isCmd = kind === 'commands';\n\n    // Sort items alphabetically\n    items.sort((a, b) => {\n      const first = isCmd ? a.usage : a.usage[1];\n      const second = isCmd ? b.usage : b.usage[1];\n\n      switch (true) {\n        case first < second:\n          return -1;\n        case first > second:\n          return 1;\n        default:\n          return 0;\n      }\n    });\n\n    for (const item in items) {\n      if (!{}.hasOwnProperty.call(items, item)) {\n        continue; // eslint-disable-line\n      }\n\n      let usage = items[item].usage;\n      let initial = items[item].defaultValue;\n\n      // If usage is an array, show its contents\n      if (usage.constructor === Array) {\n        if (isCmd) {\n          usage = usage.join(', ');\n        } else {\n          const isVersion = usage.indexOf('v');\n          usage = `-${usage[0]}, --${usage[1]}`;\n\n          if (!initial) {\n            initial = items[item].init;\n          }\n\n          usage += initial && isVersion === -1\n            ? ` ${this.handleType(initial)[0]}`\n            : '';\n        }\n      }\n\n      // Overwrite usage with readable syntax\n      items[item].usage = usage;\n    }\n\n    // Find length of longest option or command\n    // Before doing that, make a copy of the original array\n    const longest = items.slice().sort((a, b) => b.usage.length - a.usage.length)[0].usage.length;\n\n    for (const item of items) {\n      let usage = item.usage;\n      let description = item.description;\n      const defaultValue = item.defaultValue;\n      const difference = longest - usage.length;\n\n      // Compensate the difference to longest property with spaces\n      usage += ' '.repeat(difference);\n\n      // Add some space around it as well\n      if (typeof defaultValue !== 'undefined') {\n        if (typeof defaultValue === 'boolean') {\n          description += ` (${defaultValue ? 'enabled' : 'disabled'} by default)`;\n        } else {\n          description += ` (defaults to ${JSON.stringify(defaultValue)})`;\n        }\n      }\n      parts.push(\n        `  ${this.printMainColor(usage)}  ${this.printSubColor(description)}`);\n    }\n\n    return parts;\n  },\n\n  runCommand(details, options) {\n    // If help is disabled, remove initializer\n    if (details.usage === 'help' && !this.config.help) {\n      details.init = false; // eslint-disable-line\n    }\n\n    // If command has initializer, call it\n    if (details.init) {\n      const sub = [].concat(this.sub);\n      sub.shift();\n\n      return details.init.bind(this)(details.usage, sub, options);\n    }\n\n    return '';\n  },\n\n  isDefined(name, list) {\n    // Get all items of kind\n    const children = this.details[list];\n\n    // Check if a child matches the requested name\n    for (const child of children) {\n      const usage = child.usage;\n      const type = usage.constructor;\n\n      if (type === Array && usage.indexOf(name) > -1) {\n        return child;\n      }\n\n      if (type === String && usage === name) {\n        return child;\n      }\n    }\n\n    // If nothing matches, item is not defined\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}