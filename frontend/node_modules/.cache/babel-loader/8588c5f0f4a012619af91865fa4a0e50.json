{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports', 'lodash.camelcase', 'string-similarity'], factory);else if ('undefined' != typeof exports) factory(exports, require('lodash.camelcase'), require('string-similarity'));else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.lodash, global.stringSimilarity), global.utils = mod.exports;\n  }\n})(this, function (exports, _lodash, _stringSimilarity) {\n  'use strict';\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n      return arr2;\n    }\n    return Array.from(arr);\n  }\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  });\n  var _lodash2 = _interopRequireDefault(_lodash),\n    _stringSimilarity2 = _interopRequireDefault(_stringSimilarity),\n    _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && 'function' == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n    };\n  exports.default = {\n    handleType: function handleType(value) {\n      var type = value;\n      return 'function' != typeof value && (type = value.constructor), type === String ? ['[value]'] : type === Array ? ['<list>'] : type === Number || type === parseInt ? ['<n>', parseInt] : [''];\n    },\n    readOption: function readOption(option) {\n      var value = option.defaultValue,\n        contents = {},\n        _iteratorNormalCompletion = !0,\n        _didIteratorError = !1,\n        _iteratorError = void 0;\n      try {\n        for (var _step, _iterator = option.usage[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {\n          var name = _step.value,\n            fromArgs = this.raw[name];\n          'undefined' != typeof fromArgs && (value = fromArgs);\n        }\n      } catch (err) {\n        _didIteratorError = !0, _iteratorError = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion && _iterator.return && _iterator.return();\n        } finally {\n          if (_didIteratorError) throw _iteratorError;\n        }\n      }\n      var count = -1,\n        _iteratorNormalCompletion2 = !0,\n        _didIteratorError2 = !1,\n        _iteratorError2 = void 0;\n      try {\n        for (var _step2, _name, _iterator2 = option.usage[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = !0) {\n          _name = _step2.value, count += 1;\n          var propVal = value;\n          Array.isArray(option.defaultValue) && ('undefined' == typeof propVal ? 'undefined' : _typeof(propVal)) !== _typeof(option.defaultValue) && (0 == count && this.raw._.push(propVal), propVal = [propVal]), 'undefined' != typeof option.defaultValue && ('undefined' == typeof propVal ? 'undefined' : _typeof(propVal)) !== _typeof(option.defaultValue) && (0 == count && this.raw._.push(propVal), propVal = option.defaultValue);\n          var condition = !0;\n          option.init && (option.init === toString && (condition = propVal.constructor === Number), condition && (propVal = option.init(propVal))), 1 < _name.length && (_name = (0, _lodash2.default)(_name)), contents[_name] = propVal;\n        }\n      } catch (err) {\n        _didIteratorError2 = !0, _iteratorError2 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion2 && _iterator2.return && _iterator2.return();\n        } finally {\n          if (_didIteratorError2) throw _iteratorError2;\n        }\n      }\n      return contents;\n    },\n    getOptions: function getOptions(definedSubcommand) {\n      var _this = this,\n        options = {},\n        args = {},\n        _iteratorNormalCompletion3 = !0,\n        _didIteratorError3 = !1,\n        _iteratorError3 = void 0;\n      try {\n        for (var _step3, _option, _iterator3 = this.details.options[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = !0) (_option = _step3.value, 'undefined' != typeof _option.defaultValue) && Object.assign(options, this.readOption(_option));\n      } catch (err) {\n        _didIteratorError3 = !0, _iteratorError3 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion3 && _iterator3.return && _iterator3.return();\n        } finally {\n          if (_didIteratorError3) throw _iteratorError3;\n        }\n      }\n      Object.assign(args, this.raw);\n      var _ = [].concat(_toConsumableArray(args._));\n      for (var option in delete args._, args) if ({}.hasOwnProperty.call(args, option)) {\n        var related = this.isDefined(option, 'options');\n        if (related) {\n          var details = this.readOption(related);\n          Object.assign(options, details);\n        }\n        related || definedSubcommand || function () {\n          var availableOptions = [];\n          _this.details.options.forEach(function (opt) {\n            availableOptions.push.apply(availableOptions, _toConsumableArray(opt.usage));\n          });\n          var suggestOption = _stringSimilarity2.default.findBestMatch(option, availableOptions);\n          if (console.log('The option \"' + option + '\" is unknown.'), 0.5 <= suggestOption.bestMatch.rating) {\n            console.log(' Did you mean the following one?\\n');\n            var suggestion = _this.details.options.filter(function (item) {\n              var _iteratorNormalCompletion4 = !0,\n                _didIteratorError4 = !1,\n                _iteratorError4 = void 0;\n              try {\n                for (var _step4, flag, _iterator4 = item.usage[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = !0) if (flag = _step4.value, flag === suggestOption.bestMatch.target) return !0;\n              } catch (err) {\n                _didIteratorError4 = !0, _iteratorError4 = err;\n              } finally {\n                try {\n                  !_iteratorNormalCompletion4 && _iterator4.return && _iterator4.return();\n                } finally {\n                  if (_didIteratorError4) throw _iteratorError4;\n                }\n              }\n              return !1;\n            });\n            console.log(_this.generateDetails(suggestion)[0].trim() + '\\n');\n          } else console.log(' Here\\'s a list of all available options: \\n'), _this.showHelp();\n        }();\n      }\n      return options._ = _, options;\n    },\n    generateExamples: function generateExamples() {\n      var examples = this.details.examples,\n        parts = [];\n      for (var item in examples) if ({}.hasOwnProperty.call(examples, item)) {\n        var usage = this.printSubColor('$ ' + examples[item].usage),\n          description = this.printMainColor('- ' + examples[item].description);\n        parts.push('  ' + description + '\\n\\n    ' + usage + '\\n\\n');\n      }\n      return parts;\n    },\n    generateDetails: function generateDetails(kind) {\n      var items = 'string' == typeof kind ? [].concat(_toConsumableArray(this.details[kind])) : [].concat(_toConsumableArray(kind)),\n        parts = [],\n        isCmd = 'commands' === kind;\n      for (var item in items.sort(function (a, b) {\n        var first = isCmd ? a.usage : a.usage[1],\n          second = isCmd ? b.usage : b.usage[1];\n        switch (!0) {\n          case first < second:\n            return -1;\n          case first > second:\n            return 1;\n          default:\n            return 0;\n        }\n      }), items) if ({}.hasOwnProperty.call(items, item)) {\n        var usage = items[item].usage,\n          initial = items[item].defaultValue;\n        if (usage.constructor === Array) if (isCmd) usage = usage.join(', ');else {\n          var isVersion = usage.indexOf('v');\n          usage = '-' + usage[0] + ', --' + usage[1], initial || (initial = items[item].init), usage += initial && -1 === isVersion ? ' ' + this.handleType(initial)[0] : '';\n        }\n        items[item].usage = usage;\n      }\n      var longest = items.slice().sort(function (a, b) {\n          return b.usage.length - a.usage.length;\n        })[0].usage.length,\n        _iteratorNormalCompletion5 = !0,\n        _didIteratorError5 = !1,\n        _iteratorError5 = void 0;\n      try {\n        for (var _step5, _iterator5 = items[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = !0) {\n          var _item = _step5.value,\n            usage = _item.usage,\n            description = _item.description,\n            defaultValue = _item.defaultValue,\n            difference = longest - usage.length;\n          usage += ' '.repeat(difference), 'undefined' != typeof defaultValue && ('boolean' == typeof defaultValue ? description += ' (' + (defaultValue ? 'enabled' : 'disabled') + ' by default)' : description += ' (defaults to ' + JSON.stringify(defaultValue) + ')'), parts.push('  ' + this.printMainColor(usage) + '  ' + this.printSubColor(description));\n        }\n      } catch (err) {\n        _didIteratorError5 = !0, _iteratorError5 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion5 && _iterator5.return && _iterator5.return();\n        } finally {\n          if (_didIteratorError5) throw _iteratorError5;\n        }\n      }\n      return parts;\n    },\n    runCommand: function runCommand(details, options) {\n      if ('help' !== details.usage || this.config.help || (details.init = !1), details.init) {\n        var sub = [].concat(this.sub);\n        return sub.shift(), details.init.bind(this)(details.usage, sub, options);\n      }\n      return '';\n    },\n    isDefined: function isDefined(name, list) {\n      var children = this.details[list],\n        _iteratorNormalCompletion6 = !0,\n        _didIteratorError6 = !1,\n        _iteratorError6 = void 0;\n      try {\n        for (var _step6, _iterator6 = children[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = !0) {\n          var child = _step6.value,\n            usage = child.usage,\n            type = usage.constructor;\n          if (type === Array && -1 < usage.indexOf(name)) return child;\n          if (type === String && usage === name) return child;\n        }\n      } catch (err) {\n        _didIteratorError6 = !0, _iteratorError6 = err;\n      } finally {\n        try {\n          !_iteratorNormalCompletion6 && _iterator6.return && _iterator6.return();\n        } finally {\n          if (_didIteratorError6) throw _iteratorError6;\n        }\n      }\n      return !1;\n    }\n  };\n});","map":{"version":3,"mappings":"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","names":["handleType","value","type","constructor","String","Array","Number","parseInt","readOption","option","defaultValue","contents","_iteratorNormalCompletion","_didIteratorError","_iteratorError","usage","name","fromArgs","raw","count","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","propVal","isArray","_","push","condition","init","toString","length","getOptions","definedSubcommand","options","args","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","details","Object","assign","hasOwnProperty","call","related","isDefined","availableOptions","_this","forEach","opt","suggestOption","_stringSimilarity2","findBestMatch","console","log","bestMatch","rating","suggestion","filter","item","_didIteratorError4","_iteratorError4","flag","target","generateDetails","trim","showHelp","generateExamples","examples","parts","printSubColor","description","printMainColor","kind","items","isCmd","sort","a","b","first","second","initial","join","isVersion","indexOf","longest","slice","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","difference","repeat","JSON","stringify","runCommand","config","help","sub","concat","shift","bind","list","children","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","child"],"sources":["../../../src/js/args/utils.js"],"sourcesContent":["import camelcase from 'lodash.camelcase';\nimport stringSimilarity from 'string-similarity';\n\nexport default {\n  handleType(value) {\n    let type = value;\n    if (typeof value !== 'function') {\n      type = value.constructor;\n    }\n\n    // Depending on the type of the default value,\n    // select a default initializer function\n    switch (type) {\n      case String:\n        return ['[value]'];\n      case Array:\n        return ['<list>'];\n      case Number:\n      case parseInt:\n        return ['<n>', parseInt];\n      default:\n        return [''];\n    }\n  },\n\n  readOption(option) {\n    let value = option.defaultValue;\n    const contents = {};\n\n    // If option has been used, get its value\n    for (const name of option.usage) {\n      const fromArgs = this.raw[name];\n      if (typeof fromArgs !== 'undefined') {\n        value = fromArgs;\n      }\n    }\n\n    let count = -1;\n    // Process the option's value\n    for (let name of option.usage) {\n      count += 1;\n      let propVal = value;\n\n      // Convert the value to an array when the option is called just once\n      if (\n        Array.isArray(option.defaultValue) &&\n        typeof propVal !== typeof option.defaultValue\n      ) {\n        if (count === 0) {\n          this.raw._.push(propVal);\n        }\n        propVal = [propVal];\n      }\n\n      if (\n        typeof option.defaultValue !== 'undefined' &&\n        typeof propVal !== typeof option.defaultValue\n      ) {\n        if (count === 0) {\n          this.raw._.push(propVal);\n        }\n        propVal = option.defaultValue;\n      }\n\n      let condition = true;\n\n      if (option.init) {\n        // Only use the toString initializer if value is a number\n        if (option.init === toString) {\n          condition = propVal.constructor === Number;\n        }\n\n        if (condition) {\n          // Pass it through the initializer\n          propVal = option.init(propVal);\n        }\n      }\n\n      // Camelcase option name (skip short flag)\n      if (name.length > 1) {\n        name = camelcase(name);\n      }\n\n      // Add option to list\n      contents[name] = propVal;\n    }\n\n    return contents;\n  },\n\n  getOptions(definedSubcommand) {\n    const options = {};\n    const args = {};\n\n    // Set option defaults\n    for (const option of this.details.options) {\n      if (typeof option.defaultValue === 'undefined') {\n        continue; // eslint-disable-line\n      }\n\n      Object.assign(options, this.readOption(option));\n    }\n\n    // Copy over the arguments\n    Object.assign(args, this.raw);\n    const _ = [...args._];\n    delete args._;\n\n    // Override defaults if used in command line\n    for (const option in args) {\n      if (!{}.hasOwnProperty.call(args, option)) {\n        continue; // eslint-disable-line\n      }\n      const related = this.isDefined(option, 'options');\n\n      if (related) {\n        const details = this.readOption(related);\n        Object.assign(options, details);\n      }\n\n      if (!related && !definedSubcommand) {\n        // Unknown Option\n        const availableOptions = [];\n        this.details.options.forEach((opt) => {\n          availableOptions.push(...opt.usage);\n        });\n\n        const suggestOption = stringSimilarity.findBestMatch(\n          option,\n          availableOptions,\n        );\n\n        console.log(`The option \"${option}\" is unknown.`); // eslint-disable-line\n\n        if (suggestOption.bestMatch.rating >= 0.5) {\n          console.log(' Did you mean the following one?\\n'); // eslint-disable-line\n\n          const suggestion = this.details.options.filter((item) => {\n            for (const flag of item.usage) {\n              if (flag === suggestOption.bestMatch.target) {\n                return true;\n              }\n            }\n\n            return false;\n          });\n\n          console.log(`${this.generateDetails(suggestion)[0].trim()}\\n`); // eslint-disable-line\n        } else {\n          console.log(' Here\\'s a list of all available options: \\n'); // eslint-disable-line\n          this.showHelp();\n        }\n      }\n    }\n\n    options._ = _;\n    return options;\n  },\n\n  generateExamples() {\n    const { examples } = this.details;\n    const parts = [];\n\n    for (const item in examples) {\n      if (!{}.hasOwnProperty.call(examples, item)) {\n        continue; // eslint-disable-line\n      }\n      const usage = this.printSubColor(`$ ${examples[item].usage}`);\n      const description = this.printMainColor(`- ${examples[item].description}`);\n      parts.push(`  ${description}\\n\\n    ${usage}\\n\\n`);\n    }\n\n    return parts;\n  },\n\n  generateDetails(kind) {\n    // Get all properties of kind from global scope\n    const items = typeof kind === 'string' ? [...this.details[kind]] : [...kind];\n    const parts = [];\n    const isCmd = kind === 'commands';\n\n    // Sort items alphabetically\n    items.sort((a, b) => {\n      const first = isCmd ? a.usage : a.usage[1];\n      const second = isCmd ? b.usage : b.usage[1];\n\n      switch (true) {\n        case first < second:\n          return -1;\n        case first > second:\n          return 1;\n        default:\n          return 0;\n      }\n    });\n\n    for (const item in items) {\n      if (!{}.hasOwnProperty.call(items, item)) {\n        continue; // eslint-disable-line\n      }\n\n      let { usage } = items[item];\n      let initial = items[item].defaultValue;\n\n      // If usage is an array, show its contents\n      if (usage.constructor === Array) {\n        if (isCmd) {\n          usage = usage.join(', ');\n        } else {\n          const isVersion = usage.indexOf('v');\n          usage = `-${usage[0]}, --${usage[1]}`;\n\n          if (!initial) {\n            initial = items[item].init;\n          }\n\n          usage += initial && isVersion === -1\n            ? ` ${this.handleType(initial)[0]}`\n            : '';\n        }\n      }\n\n      // Overwrite usage with readable syntax\n      items[item].usage = usage;\n    }\n\n    // Find length of longest option or command\n    // Before doing that, make a copy of the original array\n    const longest = items.slice().sort((a, b) => b.usage.length - a.usage.length)[0].usage.length;\n\n    for (const item of items) {\n      let { usage, description } = item;\n      const { defaultValue } = item;\n      const difference = longest - usage.length;\n\n      // Compensate the difference to longest property with spaces\n      usage += ' '.repeat(difference);\n\n      // Add some space around it as well\n      if (typeof defaultValue !== 'undefined') {\n        if (typeof defaultValue === 'boolean') {\n          description += ` (${defaultValue ? 'enabled' : 'disabled'} by default)`;\n        } else {\n          description += ` (defaults to ${JSON.stringify(defaultValue)})`;\n        }\n      }\n      parts.push(`  ${this.printMainColor(usage)}  ${this.printSubColor(description)}`);\n    }\n\n    return parts;\n  },\n\n  runCommand(details, options) {\n    // If help is disabled, remove initializer\n    if (details.usage === 'help' && !this.config.help) {\n      details.init = false; // eslint-disable-line\n    }\n\n    // If command has initializer, call it\n    if (details.init) {\n      const sub = [].concat(this.sub);\n      sub.shift();\n\n      return details.init.bind(this)(details.usage, sub, options);\n    }\n\n    return '';\n  },\n\n  isDefined(name, list) {\n    // Get all items of kind\n    const children = this.details[list];\n\n    // Check if a child matches the requested name\n    for (const child of children) {\n      const { usage } = child;\n      const type = usage.constructor;\n\n      if (type === Array && usage.indexOf(name) > -1) {\n        return child;\n      }\n\n      if (type === String && usage === name) {\n        return child;\n      }\n    }\n\n    // If nothing matches, item is not defined\n    return false;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}