{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports'], factory);else if ('undefined' != typeof exports) factory(exports);else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports), global.help = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  }), exports.default = function () {\n    var name = this.config.name,\n      firstBig = function (word) {\n        return word.charAt(0).toUpperCase() + word.substr(1);\n      },\n      parts = [],\n      groups = {\n        options: !0,\n        examples: !0\n      };\n    for (var group in groups) 0 < this.details[group].length || (groups[group] = !1);\n    var optionHandle = groups.options ? '[options] ' : '',\n      value = 'string' == typeof this.config.value ? ' ' + this.config.value : '';\n    for (var _group in parts.push(['', 'Usage: ' + this.printMainColor(name) + ' ' + this.printSubColor(optionHandle + value), '']), groups) groups[_group] && (parts.push(['', firstBig(_group) + ':', '', '']), 'examples' == _group ? parts.push(this.generateExamples()) : parts.push(this.generateDetails(_group)), parts.push(['', '']));\n    var output = '',\n      _iteratorNormalCompletion = !0,\n      _didIteratorError = !1,\n      _iteratorError = void 0;\n    try {\n      for (var _step, part, _iterator = parts[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) part = _step.value, output += part.join('\\n  ');\n    } catch (err) {\n      _didIteratorError = !0, _iteratorError = err;\n    } finally {\n      try {\n        !_iteratorNormalCompletion && _iterator.return && _iterator.return();\n      } finally {\n        if (_didIteratorError) throw _iteratorError;\n      }\n    }\n    groups.options || (output = 'No options available');\n    var usageFilter = this.config.usageFilter;\n    'function' == typeof usageFilter && (output = usageFilter(output) || output), console.log(output);\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;wBAAe,YAAY;IAAA,IACjBA,IADiB,GACR,KAAKC,MADG,CACjBD,IADiB;MAEnBE,WAAW;QAAA,OAAQC,KAAKC,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BF,KAAKG,MAAL,CAAY,CAAZ,CAAvC;MAAA,CAFQ;MAInBC,QAAQ,EAJW;MAMnBC,SAAS;QACbC,WADa;QAEbC;MAFa,CANU;IAWzB,KAAK,IAAMC,KAAX,IAAoBH,MAApB,EACmC,CAA7B,QAAKI,OAAL,CAAaD,KAAb,EAAoBE,MAD1B,KAKEL,OAAOG,KAAP,MALF;IAQA,IAAMG,eAAeN,OAAOC,OAAP,GAAiB,YAAjB,GAAgC,EAArD;MACMM,QAAqC,QAA7B,WAAO,KAAKd,MAAL,CAAYc,KAAnB,SACN,KAAKd,MAAL,CAAYc,KADN,GAEV,EAHJ;IAWA,KAAK,IAAMJ,MAAX,IANAJ,MAAMS,IAAN,CAAW,CACT,EADS,cAEC,KAAKC,cAAL,CAAoBjB,IAApB,CAFD,SAE8B,KAAKkB,aAAL,CAAmBJ,eAAeC,KAAlC,CAF9B,EAGT,EAHS,CAAX,CAMA,EAAoBP,MAApB,EACOA,OAAOG,MAAP,CADP,KAKEJ,MAAMS,IAAN,CAAW,CAAC,EAAD,EAAQd,SAASS,MAAT,CAAR,QAA4B,EAA5B,EAAgC,EAAhC,CAAX,CALF,EAOgB,UAAV,UAPN,GAQIJ,MAAMS,IAAN,CAAW,KAAKG,gBAAL,EAAX,CARJ,GAUIZ,MAAMS,IAAN,CAAW,KAAKI,eAAL,CAAqBT,MAArB,CAAX,CAVJ,EAaEJ,MAAMS,IAAN,CAAW,CAAC,EAAD,EAAK,EAAL,CAAX,CAbF;IAgBA,IAAIK,SAAS,EAAb;MAAAC;MAAAC;MAAAC;IA9CyB;MAiDzB,gBAAWC,IAAX,cAAmBlB,KAAnB,qHAAWkB,IAAX,gBACEJ,UAAUI,KAAKC,IAAL,CAAU,MAAV,CAlDa;IAAA;MAAAH;IAAA;MAAA;QAAA;MAAA;QAAA;MAAA;IAAA;IAqDpBf,OAAOC,OArDa,KAsDvBY,SAAS,sBAtDc;IAAA,IAyDjBM,WAzDiB,GAyDD,KAAK1B,MAzDJ,CAyDjB0B,WAzDiB;IA4DE,UAAvB,WAAOA,WA5Dc,KA6DvBN,SAASM,YAAYN,MAAZ,KAAuBA,MA7DT,GAgEzBO,QAAQC,GAAR,CAAYR,MAAZ,CACD;EAAA,C","names":["name","config","firstBig","word","charAt","toUpperCase","substr","parts","groups","options","examples","group","details","length","optionHandle","value","push","printMainColor","printSubColor","generateExamples","generateDetails","output","_iteratorNormalCompletion","_didIteratorError","_iteratorError","part","join","usageFilter","console","log"],"sources":["../../../src/js/args/help.js"],"sourcesContent":["export default function () {\n  const { name } = this.config;\n  const firstBig = word => word.charAt(0).toUpperCase() + word.substr(1);\n\n  const parts = [];\n\n  const groups = {\n    options: true,\n    examples: true,\n  };\n\n  for (const group in groups) {\n    if (this.details[group].length > 0) {\n      continue; // eslint-disable-line\n    }\n\n    groups[group] = false;\n  }\n\n  const optionHandle = groups.options ? '[options] ' : '';\n  const value = typeof this.config.value === 'string'\n    ? ` ${this.config.value}`\n    : '';\n\n  parts.push([\n    '',\n    `Usage: ${this.printMainColor(name)} ${this.printSubColor(optionHandle + value)}`,\n    '',\n  ]);\n\n  for (const group in groups) {\n    if (!groups[group]) {\n      continue; // eslint-disable-line\n    }\n\n    parts.push(['', `${firstBig(group)}:`, '', '']);\n\n    if (group === 'examples') {\n      parts.push(this.generateExamples());\n    } else {\n      parts.push(this.generateDetails(group));\n    }\n\n    parts.push(['', '']);\n  }\n\n  let output = '';\n\n  // And finally, merge and output them\n  for (const part of parts) {\n    output += part.join('\\n  ');\n  }\n\n  if (!groups.options) {\n    output = 'No options available';\n  }\n\n  const { usageFilter } = this.config;\n\n  // If filter is available, pass usage information through\n  if (typeof usageFilter === 'function') {\n    output = usageFilter(output) || output;\n  }\n\n  console.log(output); // eslint-disable-line\n}\n"]},"metadata":{},"sourceType":"script"}