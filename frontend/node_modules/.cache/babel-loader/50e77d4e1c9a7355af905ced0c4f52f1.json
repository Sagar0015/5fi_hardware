{"ast":null,"code":"(function (a, b) {\n  if ('function' == typeof define && define.amd) define(['exports'], b);else if ('undefined' != typeof exports) b(exports);else {\n    var c = {\n      exports: {}\n    };\n    b(c.exports), a.option = c.exports;\n  }\n})(this, function (a) {\n  'use strict';\n\n  Object.defineProperty(a, '__esModule', {\n    value: !0\n  }), a.default = function (a, b, c, d) {\n    var e = [],\n      f = function (a, b, c) {\n        return b.find(function (a) {\n          return a.usage[0] === c;\n        }) && (c = a.charAt(0).toUpperCase()), [c, a];\n      };\n    switch (a.constructor) {\n      case String:\n        e = f(a, this.details.options, a.charAt(0));\n        break;\n      case Array:\n        e = e.concat(a);\n        break;\n      default:\n        throw new Error('Invalid name for option');\n    }\n    if (0 < e.length && 1 < e[0].length) throw new Error('Short version of option is longer than 1 char');\n    var g = {\n      defaultValue: c,\n      usage: e,\n      description: b\n    };\n    if (0 === this.details.options.filter(function (a) {\n      return a.usage[1] === e[1];\n    }).length) {\n      var h;\n      if (h = !1 === c || null === c || void 0 === c, !h) {\n        g.init = 'function' == typeof d ? d : this.handleType(c)[1];\n      }\n      this.details.options.push(g);\n    }\n    return this;\n  };\n});","map":{"version":3,"mappings":";;;;;;;;;;;;kBAAe,sBAAiD;IAC9D,IAAIA,MAAJ;MAEMC,IAAc,mBAAuB;QAIzC,OAHIC,EAAQC,IAAR,CAAa;UAAA,OAAYC,EAASC,KAAT,CAAe,CAAf,OAAZ;QAAA,CAAb,CAGJ,KAFEC,IAAQF,EAAEG,MAAF,CAAS,CAAT,EAAYC,WAAZ,EAEV,GAAO,MACR;MAAA,CAPD;IAWA,QAAQJ,EAAKK,WAAb;MACE,KAAKC,MAAL;QACEV,IAAQC,KAAkB,KAAKU,OAAL,CAAaC,OAA/B,EAAwCR,EAAKG,MAAL,CAAY,CAAZ,CAAxC,CADV;QAEE;MACF,KAAKM,KAAL;QACEb,IAAQA,EAAMc,MAAN,GADV;QAEE;MACF;QACE,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;IARJ;IAYA,IAAmB,CAAf,KAAMC,MAAN,IAAsC,CAAlB,KAAM,CAAN,EAASA,MAAjC,EACE,MAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;IAGF,IAAME,IAAgB;MACpBC,eADoB;MAEpBb,QAFoB;MAGpBc;IAHoB,CAAtB;IAMA,IAA+E,CAA3E,UAAKR,OAAL,CAAaC,OAAb,CAAqBQ,MAArB,CAA4B;MAAA,OAAQhB,EAAKC,KAAL,CAAW,CAAX,MAAkBL,EAAM,CAAN,CAA1B;IAAA,CAA5B,EAAgEgB,MAApE,EAAkF;MAChF,IAAIK,CAAJ;MAiBA,oBAXO,IAWP,wBAAI,EAAJ,EAAqB;QAEnBJ,EAAcK,IAAd,GADqC,UAAhB,YACA,OAAsB,KAAKC,UAAL,IAA8B,CAA9B,CAC5C;MAAA;MAGD,KAAKZ,OAAL,CAAaC,OAAb,CAAqBY,IAArB,GACD;IAAA;IAGD,OAAO,IACR;EAAA,C","names":["e","f","b","find","a","usage","c","charAt","toUpperCase","constructor","String","details","options","Array","concat","Error","length","g","defaultValue","description","filter","h","init","handleType","push"],"sources":["../../../src/js/args/option.js"],"sourcesContent":["export default function (name, description, defaultValue, init) {\n  let usage = [];\n\n  const assignShort = (n, options, short) => {\n    if (options.find(flagName => flagName.usage[0] === short)) {\n      short = n.charAt(0).toUpperCase(); // eslint-disable-line no-param-reassign\n    }\n    return [short, n];\n  };\n\n  // If name is an array, pick the values\n  // Otherwise just use the whole thing\n  switch (name.constructor) {\n    case String:\n      usage = assignShort(name, this.details.options, name.charAt(0));\n      break;\n    case Array:\n      usage = usage.concat(name);\n      break;\n    default:\n      throw new Error('Invalid name for option');\n  }\n\n  // Throw error if short option is too long\n  if (usage.length > 0 && usage[0].length > 1) {\n    throw new Error('Short version of option is longer than 1 char');\n  }\n\n  const optionDetails = {\n    defaultValue,\n    usage,\n    description,\n  };\n\n  if (this.details.options.filter(item => item.usage[1] === usage[1]).length === 0) {\n    let defaultIsWrong;\n\n    switch (defaultValue) {\n      case false:\n        defaultIsWrong = true;\n        break;\n      case null:\n        defaultIsWrong = true;\n        break;\n      case undefined:\n        defaultIsWrong = true;\n        break;\n      default:\n        defaultIsWrong = false;\n    }\n\n    // Set initializer depending on type of default value\n    if (!defaultIsWrong) {\n      const initFunction = typeof init === 'function';\n      optionDetails.init = initFunction ? init : this.handleType(defaultValue)[1];\n    }\n\n    // Register option to global scope\n    this.details.options.push(optionDetails);\n  }\n\n  // Allow chaining of .option()\n  return this;\n}\n"]},"metadata":{},"sourceType":"script"}