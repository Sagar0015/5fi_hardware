{"ast":null,"code":"var _jsxFileName = \"/Users/azminds/Documents/five-g/frontend/src/home.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport Routes from './tools/five-g';\nimport { updateConfig } from './store/siteCoordinator/siteCoordinator.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      configure: {},\n      readConfigureDone: false,\n      restoredSessionData: true\n    };\n    this.getRoute = this.getRoute.bind(this);\n  }\n\n  componentWillMount() {\n    console.log(\"Routes container\");\n    var thisView = this;\n    axios.get('configure.json').then(function (res) {\n      var configure = res.data;\n      thisView.props.updatingConfig(configure);\n      thisView.setState({\n        configure,\n        readConfigureDone: true\n      });\n    }).catch(function (res) {\n      console.log(res);\n      console.log('An error occurred configuration');\n    });\n  }\n\n  getRoute(route) {\n    return /*#__PURE__*/_jsxDEV(Routes, {\n      config: this.state.configure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  }\n\n  render() {\n    return this.state.readConfigureDone && this.state.configure.source && this.state.restoredSessionData ? this.getRoute(this.state.configure.source) : /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this) //Dummy return instead of empty in render\n    ;\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  config: state.config\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updatingConfig(status) {\n    dispatch(updateConfig(status));\n  }\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","map":{"version":3,"sources":["/Users/azminds/Documents/five-g/frontend/src/home.js"],"names":["React","Component","connect","axios","Routes","updateConfig","Home","constructor","props","state","configure","readConfigureDone","restoredSessionData","getRoute","bind","componentWillMount","console","log","thisView","get","then","res","data","updatingConfig","setState","catch","route","render","source","mapStateToProps","config","mapDispatchToProps","dispatch","status"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA,SAASC,YAAT,QAA6B,iDAA7B;;;AAGA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAEzBM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,SAAS,EAAC,EAAX;AAAeC,MAAAA,iBAAiB,EAAE,KAAlC;AAAyCC,MAAAA,mBAAmB,EAAE;AAA9D,KAAb;AAEA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEDC,EAAAA,kBAAkB,GAAE;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAEA,QAAIC,QAAQ,GAAG,IAAf;AACAf,IAAAA,KAAK,CAACgB,GAAN,CAAU,gBAAV,EACCC,IADD,CACM,UAASC,GAAT,EAAc;AAEhB,UAAIX,SAAS,GAAGW,GAAG,CAACC,IAApB;AACAJ,MAAAA,QAAQ,CAACV,KAAT,CAAee,cAAf,CAA8Bb,SAA9B;AAEAQ,MAAAA,QAAQ,CAACM,QAAT,CAAkB;AAACd,QAAAA,SAAD;AAAYC,QAAAA,iBAAiB,EAAC;AAA9B,OAAlB;AAEH,KARD,EAQGc,KARH,CAQS,UAASJ,GAAT,EAAc;AACnBL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACH,KAXD;AAaH;;AAGDJ,EAAAA,QAAQ,CAACa,KAAD,EAAO;AAEX,wBAAO,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAE,KAAKjB,KAAL,CAAWC;AAA3B;AAAA;AAAA;AAAA;AAAA,YAAP;AAEH;;AAEDiB,EAAAA,MAAM,GAAG;AAEL,WACM,KAAKlB,KAAL,CAAWE,iBAAX,IAAgC,KAAKF,KAAL,CAAWC,SAAX,CAAqBkB,MAArD,IAA+D,KAAKnB,KAAL,CAAWG,mBAA3E,GACG,KAAKC,QAAL,CAAc,KAAKJ,KAAL,CAAWC,SAAX,CAAqBkB,MAAnC,CADH,gBAEG;AAAA;AAAA;AAAA;AAAA,YAHR,CAGuB;AAHvB;AAMH;;AA3CwB;;AA8C7B,MAAMC,eAAe,GAAGpB,KAAK,KAAK;AAC9BqB,EAAAA,MAAM,EAAErB,KAAK,CAACqB;AADgB,CAAL,CAA7B;;AAIA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAI;AACnCT,EAAAA,cAAc,CAACU,MAAD,EAAQ;AAClBD,IAAAA,QAAQ,CAAC3B,YAAY,CAAC4B,MAAD,CAAb,CAAR;AACH;;AAHkC,CAAJ,CAAnC;;AAMA,eAAe/B,OAAO,CAAC2B,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CzB,IAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\nimport Routes from './tools/five-g';\n\nimport { updateConfig } from './store/siteCoordinator/siteCoordinator.actions';\n\n\nclass Home extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state = {configure:{}, readConfigureDone: false, restoredSessionData: true}\n\n        this.getRoute = this.getRoute.bind(this);\n    }\n\n    componentWillMount(){\n        console.log(\"Routes container\");\n        \n        var thisView = this;\n        axios.get('configure.json')\n        .then(function(res) {\n            \n            var configure = res.data;\n            thisView.props.updatingConfig(configure);\n\n            thisView.setState({configure, readConfigureDone:true});\n\n        }).catch(function(res) {\n            console.log(res);\n            console.log('An error occurred configuration');\n        });\n        \n    }\n\n\n    getRoute(route){\n       \n        return <Routes config={this.state.configure}/>;\n            \n    }\n\n    render() {\n\n        return ( \n             (this.state.readConfigureDone && this.state.configure.source && this.state.restoredSessionData) ?\n                this.getRoute(this.state.configure.source) : \n                <span></span>  //Dummy return instead of empty in render\n        );\n\n    }\n}\n\nconst mapStateToProps = state => ({\n    config: state.config\n});\n  \nconst mapDispatchToProps = dispatch =>({\n    updatingConfig(status){\n        dispatch(updateConfig(status));\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n"]},"metadata":{},"sourceType":"module"}