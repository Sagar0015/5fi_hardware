{"ast":null,"code":"(function (global, factory) {\n  if ('function' == typeof define && define.amd) define(['exports', 'react', 'react-object-inspector', 'platform'], factory);else if ('undefined' != typeof exports) factory(exports, require('react'), require('react-object-inspector'), require('platform'));else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.React, global.reactObjectInspector, global.platform), global.utils = mod.exports;\n  }\n})(this, function (exports, _react, _reactObjectInspector, _platform) {\n  'use strict';\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  Object.defineProperty(exports, '__esModule', {\n    value: !0\n  }), exports.handleLogging = function (method, addToOutput) {\n    console[method] = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];\n      try {\n        var _console;\n        (_console = console).oldLog.apply(_console, ['[' + method + ']'].concat(args));\n      } catch (e) {\n        throw new Error('Terminal was loaded more than once check script tags');\n      }\n      var res = [].concat(args).slice(0, 15).map(function (arg, i) {\n        switch ('undefined' == typeof arg ? 'undefined' : _typeof(arg)) {\n          case 'object':\n            return _react2.default.createElement(_reactObjectInspector2.default, {\n              data: arg,\n              key: 'object-' + i\n            });\n          case 'function':\n            return '' + arg;\n          default:\n            return arg;\n        }\n      });\n      addToOutput(res);\n    }, Object.defineProperty(console[method], 'name', {\n      value: method,\n      writable: !1\n    });\n  }, exports.isServer = function () {\n    return !('undefined' != typeof window && window.document);\n  }, exports.getOs = function () {\n    var os = _platform2.default.os;\n    return null !== os.family && 0 === os.family.indexOf('Windows') ? 'win' : null !== os.family && -1 < linuxPlatforms.indexOf(os.family) ? 'linux' : null !== os.family && -1 < darwinPlatforms.indexOf(os.family) ? 'darwin' : 'unknown';\n  };\n  var _react2 = _interopRequireDefault(_react),\n    _reactObjectInspector2 = _interopRequireDefault(_reactObjectInspector),\n    _platform2 = _interopRequireDefault(_platform),\n    _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && 'function' == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n    };\n  (function () {\n    console.oldLog = console.log;\n  })();\n  var linuxPlatforms = ['Ubuntu', 'Debian', 'Fedora', 'Red Hat', 'SuSE', 'Android'],\n    darwinPlatforms = ['OS X', 'iOS'];\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;cAYgBA,a,GAAT,UAAuBC,MAAvB,EAA+BC,WAA/B,EAA4C;IAEjDC,QAAQF,MAAR,IAAkB,YAAa;MAAA,kCAATG,IAAS,+CAATA,IAAS;MAC7B,IAAI;QAAA;QACF,qBAAQC,MAAR,wBAAmBJ,MAAnB,eAAiCG,IAAjC,EACD;MAAA,CAAC,QAAOE,CAAP,EAAU;QACV,MAAM,IAAIC,KAAJ,CAAU,sDAAV,CACP;MAAA;MACD,IAAMC,MAAM,UAAIJ,IAAJ,EAAUK,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,EAAuBC,GAAvB,CAA2B,UAACC,GAAD,EAAMC,CAAN,EAAY;QACjD,8BAAeD,GAAf,yBAAeA,GAAf;UACE,KAAK,QAAL;YACE,OAAOE;cAAiBC,MAAMH,GAAvB;cAA4BI,iBAAeH;YAA3C,EAAP;UACF,KAAK,UAAL;YACE,YAAUD,GAAV;UACF;YACE,OAAOA,GAAP;QANJ;MAQD,CATW,CAAZ;MAUAT,YAAYM,GAAZ,CACD;IAAA,CAnBgD,EAoBjDQ,OAAOC,cAAP,CAAsBd,QAAQF,MAAR,CAAtB,EAAuC,MAAvC,EAA+C;MAAEiB,OAAOjB,MAAT;MAAiBkB;IAAjB,CAA/C,CACD;EAAA,C,UAEeC,Q,GAAT,YAAoB;IACzB,OAAO,EAAoB,WAAlB,WAAOC,MAAP,IAAiCA,OAAOC,QAA1C,CACR;EAAA,C,UAKeC,K,GAAT,YAAiB;IAAA,IACdC,EADc,sBACdA,EADc;IAAA,OAEJ,IAAd,QAAGC,MAAH,IAAuD,CAAjC,QAAGA,MAAH,CAAUC,OAAV,CAAkB,SAAlB,CAFJ,GAGb,KAHa,GAKJ,IAAd,QAAGD,MAAH,IAA0D,CAAC,CAArC,kBAAeC,OAAf,CAAuBF,GAAGC,MAA1B,CALJ,GAMb,OANa,GAQJ,IAAd,QAAGA,MAAH,IAA2D,CAAC,CAAtC,mBAAgBC,OAAhB,CAAwBF,GAAGC,MAA3B,CARJ,GASb,QATa,GAWf,SACR;EAAA,C;;;;;;;;;EAhDA,aAAwB;IACvBtB,iBAAoBA,WACrB;EAAA,CAFA,G;EAiCD,IAAMwB,iBAAiB,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,SAA/B,EAA0C,MAA1C,EAAkD,SAAlD,CAAvB;IACMC,kBAAkB,CAAC,MAAD,EAAS,KAAT,C","names":["handleLogging","method","addToOutput","console","args","oldLog","e","Error","res","slice","map","arg","i","_react2","data","key","Object","defineProperty","value","writable","isServer","window","document","getOs","os","family","indexOf","linuxPlatforms","darwinPlatforms"],"sources":["../../src/js/utils.js"],"sourcesContent":["/* eslint-disable no-console */\nimport React from 'react'; // eslint-disable-line\nimport ObjectInspector from 'react-object-inspector';\nimport platform from 'platform';\n\n// Capture the console.log calls (hijacking)\n(function setOldLogger() {\n  console['oldLog'] = console['log']; // eslint-disable-line dot-notation\n}());\n\n// Handle console logging\n// eslint-disable-next-line import/prefer-default-export\nexport function handleLogging(method, addToOutput) {\n  // eslint-disable-next-line no-console\n  console[method] = (...args) => {\n    try {\n      console.oldLog(`[${method}]`, ...args);\n    } catch (e) {\n      throw new Error('Terminal was loaded more than once check script tags');\n    }\n    const res = [...args].slice(0, 15).map((arg, i) => {\n      switch (typeof arg) {\n        case 'object':\n          return <ObjectInspector data={arg} key={`object-${i}`} />;\n        case 'function':\n          return `${arg}`;\n        default:\n          return arg;\n      }\n    });\n    addToOutput(res);\n  };\n  Object.defineProperty(console[method], 'name', { value: method, writable: false }); // eslint-disable-line no-console\n}\n\nexport function isServer() {\n  return !(typeof window !== 'undefined' && window.document);\n}\n\nconst linuxPlatforms = ['Ubuntu', 'Debian', 'Fedora', 'Red Hat', 'SuSE', 'Android'];\nconst darwinPlatforms = ['OS X', 'iOS'];\n\nexport function getOs() {\n  const { os } = platform;\n  if (os.family !== null && os.family.indexOf('Windows') === 0) {\n    return 'win';\n  }\n  if (os.family !== null && linuxPlatforms.indexOf(os.family) > -1) {\n    return 'linux';\n  }\n  if (os.family !== null && darwinPlatforms.indexOf(os.family) > -1) {\n    return 'darwin';\n  }\n  return 'unknown';\n}\n"]},"metadata":{},"sourceType":"script"}